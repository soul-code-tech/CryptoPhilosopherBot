const axios = require('axios');
const CryptoJS = require('crypto-js');

// ==========================
// –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ‚Äî –¢–†–ï–ô–î–ò–ù–ì –ë–û–¢ –í–ê–°–Ø 3000 –£–ù–ò–ö–ê–õ–¨–ù–´–ô (BINGX FUTURES)
// ==========================
let globalState = {
  balance: 100, // –¥–µ–º–æ-–±–∞–ª–∞–Ω—Å
  positions: {},
  history: [],
  stats: {
    totalTrades: 0,
    profitableTrades: 0,
    losingTrades: 0,
    winRate: 0,
    totalProfit: 0,
    maxDrawdown: 0,
    peakBalance: 100,
    maxLeverageUsed: 1
  },
  marketMemory: {
    lastTrades: {},
    consecutiveTrades: {},
    volatilityHistory: {},
    fearSentimentHistory: []
  },
  isRunning: true,
  takerFee: 0.0005,
  maxRiskPerTrade: 0.01, // 1% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
  maxLeverage: 3,        // 3x –ø–ª–µ—á–æ
  watchlist: [
    { symbol: 'BTC', name: 'bitcoin' },
    { symbol: 'ETH', name: 'ethereum' },
    { symbol: 'BNB', name: 'binancecoin' },
    { symbol: 'SOL', name: 'solana' },
    { symbol: 'XRP', name: 'ripple' },
    { symbol: 'DOGE', name: 'dogecoin' },
    { symbol: 'ADA', name: 'cardano' },
    { symbol: 'DOT', name: 'polkadot' },
    { symbol: 'LINK', name: 'chainlink' }
  ]
};

globalState.watchlist.forEach(coin => {
  globalState.positions[coin.name] = null;
  globalState.marketMemory.lastTrades[coin.name] = [];
  globalState.marketMemory.consecutiveTrades[coin.name] = 0;
  globalState.marketMemory.volatilityHistory[coin.name] = [];
});

// ==========================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø BINGX API
// ==========================
const BINGX_API_KEY = process.env.BINGX_API_KEY;
const BINGX_SECRET_KEY = process.env.BINGX_SECRET_KEY;
const BINGX_FUTURES_URL = 'https://open-api.bingx.com';

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è BingX
// ==========================
function signBingXRequest(params) {
  const sortedParams = Object.keys(params)
    .sort()
    .map(key => `${key}=${params[key]}`)
    .join('&');
  return CryptoJS.HmacSHA256(sortedParams, BINGX_SECRET_KEY).toString(CryptoJS.enc.Hex);
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ Fear & Greed Index
// ==========================
async function getFearAndGreedIndex() {
  try {
    const response = await axios.get('https://api.alternative.me/fng/?limit=1', { timeout: 10000 });
    const value = parseInt(response.data.data[0].value);
    globalState.marketMemory.fearSentimentHistory.push({ value, timestamp: Date.now() });
    if (globalState.marketMemory.fearSentimentHistory.length > 24) {
      globalState.marketMemory.fearSentimentHistory.shift();
    }
    return value;
  } catch (e) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º 50');
    return 50;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Å BingX
// ==========================
async function getCurrentFuturesPrices() {
  try {
    const response = await axios.get('https://open-api.bingx.com/openApi/swap/v2/quote/price', { timeout: 15000 });

    if (!response.data || !Array.isArray(response.data.data)) {
      console.error('‚ùå BingX –Ω–µ –≤–µ—Ä–Ω—É–ª –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤');
      return {};
    }

    const prices = {};
    for (const ticker of response.data.data) {
      if (!ticker.symbol || !ticker.price) continue;

      const coinSymbol = ticker.symbol.replace('USDT', '').toLowerCase();
      let coinName = '';
      switch(coinSymbol) {
        case 'btc': coinName = 'bitcoin'; break;
        case 'eth': coinName = 'ethereum'; break;
        case 'bnb': coinName = 'binancecoin'; break;
        case 'sol': coinName = 'solana'; break;
        case 'xrp': coinName = 'ripple'; break;
        case 'doge': coinName = 'dogecoin'; break;
        case 'ada': coinName = 'cardano'; break;
        case 'dot': coinName = 'polkadot'; break;
        case 'link': coinName = 'chainlink'; break;
        default: continue;
      }
      prices[coinName] = parseFloat(ticker.price);
    }

    return prices;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Å BingX:', error.message);
    return {};
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Å BingX
// ==========================
async function getBingXFuturesHistory(symbol, interval = '1h', limit = 50) {
  try {
    const symbolMap = {
      'bitcoin': 'BTC-USDT',
      'ethereum': 'ETH-USDT',
      'binancecoin': 'BNB-USDT',
      'solana': 'SOL-USDT',
      'ripple': 'XRP-USDT',
      'dogecoin': 'DOGE-USDT',
      'cardano': 'ADA-USDT',
      'polkadot': 'DOT-USDT',
      'chainlink': 'LINK-USDT'
    };

    const bingxSymbol = symbolMap[symbol];
    if (!bingxSymbol) {
      console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–Ω–µ—Ç–∞: ${symbol}`);
      return [];
    }

    const response = await axios.get('https://open-api.bingx.com/openApi/swap/v2/quote/klines', {
      params: {
        symbol: bingxSymbol,
        interval: interval,
        limit: limit
      },
      timeout: 15000
    });

    if (!response.data || !Array.isArray(response.data.data)) {
      console.error(`‚ùå BingX –≤–µ—Ä–Ω—É–ª –Ω–µ –º–∞—Å—Å–∏–≤ –¥–ª—è ${symbol}:`, response.data);
      return [];
    }

    const candles = response.data.data.map(candle => ({
      price: parseFloat(candle.close),
      high: parseFloat(candle.high),
      low: parseFloat(candle.low),
      volume: parseFloat(candle.volume),
      time: candle.time
    }));

    return candles;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è ${symbol} —Å BingX:`, error.message);
    return [];
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –£–ù–ò–ö–ê–õ–¨–ù–´–ô –§–ò–õ–û–°–û–§–°–ö–ò–ô –ê–ù–ê–õ–ò–ó
// ==========================
function analyzeFuturesWithWisdom(candles, coinName, currentFearIndex) {
  if (candles.length < 10) return null;

  const prices = candles.map(c => c.price);
  const currentPrice = prices[prices.length - 1];
  const sma20 = prices.slice(-20).reduce((a, b) => a + b, 0) / 20;
  const atr = calculateATR(candles.slice(-14));
  const rsi = calculateRSI(prices.slice(-14));

  const isOverextendedUp = currentPrice > sma20 * 1.05;
  const isOverextendedDown = currentPrice < sma20 * 0.95;
  const volatility = atr / currentPrice;
  const isHighVolatility = volatility > 0.03;
  const isExtremeFear = currentFearIndex < 20;
  const isExtremeGreed = currentFearIndex > 80;

  let signal = {
    direction: null,
    confidence: 0.5,
    leverage: 1,
    reasoning: [],
    stopLoss: null,
    takeProfit: null
  };

  if (isExtremeFear && rsi < 30 && !isOverextendedDown) {
    signal.direction = 'LONG';
    signal.confidence += 0.3;
    signal.reasoning.push("‚òØÔ∏è –ò–Ω—å-–Ø–Ω: —Å—Ç—Ä–∞—Ö + –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å ‚Üí –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥ –≤ LONG");
  }

  if (isExtremeGreed && rsi > 70 && !isOverextendedUp) {
    signal.direction = 'SHORT';
    signal.confidence += 0.3;
    signal.reasoning.push("üî• –ü–µ—Ä–µ–≥—Ä–µ–≤: –∂–∞–¥–Ω–æ—Å—Ç—å + –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å ‚Üí –≤—Ö–æ–¥ –≤ SHORT");
  }

  if (isHighVolatility) {
    signal.confidence += 0.2;
    signal.reasoning.push("ü¶ã –≠—Ñ—Ñ–µ–∫—Ç –±–∞–±–æ—á–∫–∏: —Ä–µ–∑–∫–∏–π —Å–∫–∞—á–æ–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ ‚Üí —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞");
  }

  const consecutive = globalState.marketMemory.consecutiveTrades[coinName] || 0;
  if (consecutive >= 2) {
    signal.leverage = Math.max(1, globalState.maxLeverage * 0.5);
    signal.reasoning.push("üß± –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∏—Å–∫–∞: 2+ —Å–¥–µ–ª–∫–∏ ‚Üí —Å–Ω–∏–∂–∞–µ–º –ø–ª–µ—á–æ –¥–æ " + signal.leverage + "x");
  } else {
    signal.leverage = globalState.maxLeverage;
  }

  if (signal.direction === 'LONG') {
    signal.stopLoss = currentPrice * 0.98;
    signal.takeProfit = currentPrice * 1.03;
  } else if (signal.direction === 'SHORT') {
    signal.stopLoss = currentPrice * 1.02;
    signal.takeProfit = currentPrice * 0.97;
  }

  signal.reasoning.push("üåä –¶—É–Ω–∞–º–∏ –ø—Ä–∏–±—ã–ª–∏: 50% –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞ +3%, –æ—Å—Ç–∞—Ç–æ–∫ –≤ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø");

  return {
    coin: coinName,
    currentPrice,
    signal,
    rsi,
    volatility,
    sma20,
    fearIndex: currentFearIndex
  };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculateATR(candles) {
  let trSum = 0;
  for (let i = 1; i < candles.length; i++) {
    const tr = Math.max(
      candles[i].high - candles[i].low,
      Math.abs(candles[i].high - candles[i-1].price),
      Math.abs(candles[i].low - candles[i-1].price)
    );
    trSum += tr;
  }
  return trSum / candles.length;
}

function calculateRSI(prices) {
  if (prices.length < 2) return 50;
  let gains = 0, losses = 0, count = 0;
  for (let i = 1; i < prices.length; i++) {
    const diff = prices[i] - prices[i-1];
    if (diff > 0) gains += diff;
    else losses += Math.abs(diff);
    count++;
  }
  const avgGain = gains / count;
  const avgLoss = losses / count;
  const rs = avgLoss === 0 ? 100 : avgGain / avgLoss;
  return 100 - (100 / (1 + rs));
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
// ==========================
async function setBingXLeverage(symbol, leverage) {
  try {
    const timestamp = Date.now();
    const params = { symbol, leverage: leverage.toString(), timestamp };
    const signature = signBingXRequest(params);
    const url = `${BINGX_FUTURES_URL}/openApi/swap/v2/trade/leverage?${new URLSearchParams(params)}&signature=${signature}`;

    const response = await axios.post(url, {}, {
      headers: { 'X-BX-APIKEY': BINGX_API_KEY },
      timeout: 10000
    });

    if (response.data.code === 0) {
      console.log(`‚úÖ –ü–ª–µ—á–æ ${leverage}x —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${symbol}`);
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞ –¥–ª—è ${symbol}:`, response.data.msg);
    }
  } catch (error) {
    console.error(`üí• –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞:`, error.message);
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
// ==========================
async function placeBingXFuturesOrder(symbol, side, positionSide, type, quantity, price = null, leverage) {
  try {
    await setBingXLeverage(symbol, leverage);

    const timestamp = Date.now();
    const params = {
      symbol,
      side,
      positionSide,
      type,
      quantity: quantity.toFixed(6),
      timestamp
    };

    if (price && type === 'LIMIT') {
      params.price = price.toFixed(8);
    }

    const signature = signBingXRequest(params);
    const url = `${BINGX_FUTURES_URL}/openApi/swap/v2/trade/order?${new URLSearchParams(params)}&signature=${signature}`;

    const response = await axios.post(url, {}, {
      headers: { 'X-BX-APIKEY': BINGX_API_KEY },
      timeout: 10000
    });

    if (response.data.code === 0) {
      console.log(`‚úÖ –£–°–ü–ï–®–ù–´–ô –û–†–î–ï–†: ${side} ${quantity} ${symbol}`);
      return response.data.data;
    } else {
      console.error(`‚ùå –û–®–ò–ë–ö–ê –û–†–î–ï–†–ê:`, response.data.msg);
      return null;
    }
  } catch (error) {
    console.error(`üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞:`, error.message);
    return null;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –û—Ç–∫—Ä—ã—Ç–∏–µ –†–ï–ê–õ–¨–ù–û–ô —Ñ—å—é—á–µ—Ä—Å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
// ==========================
async function openFuturesTrade(coin, direction, leverage, size, price, stopLoss, takeProfit) {
  const symbolMap = {
    'bitcoin': 'BTC-USDT',
    'ethereum': 'ETH-USDT',
    'binancecoin': 'BNB-USDT',
    'solana': 'SOL-USDT',
    'ripple': 'XRP-USDT',
    'dogecoin': 'DOGE-USDT',
    'cardano': 'ADA-USDT',
    'polkadot': 'DOT-USDT',
    'chainlink': 'LINK-USDT'
  };

  const symbol = symbolMap[coin];
  if (!symbol) {
    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è ${coin}`);
    return false;
  }

  const side = direction === 'LONG' ? 'BUY' : 'SELL';
  const positionSide = direction;

  console.log(`üåê –û—Ç–ø—Ä–∞–≤–∫–∞ ${direction} –æ—Ä–¥–µ—Ä–∞ –Ω–∞ BingX Futures: ${size} ${symbol} —Å –ø–ª–µ—á–æ–º ${leverage}x`);

  const result = await placeBingXFuturesOrder(symbol, side, positionSide, 'MARKET', size, null, leverage);

  if (result) {
    const trade = {
      coin,
      type: direction,
      size,
      entryPrice: price,
      leverage,
      stopLoss,
      takeProfit,
      fee: 0,
      timestamp: new Date().toLocaleString(),
      status: 'OPEN',
      orderId: result.orderId
    };

    globalState.history.push(trade);
    globalState.positions[coin] = {
      side: direction,
      size,
      entryPrice: price,
      leverage,
      stopLoss,
      takeProfit,
      fee: 0,
      timestamp: new Date().toLocaleString(),
      trailingStop: price * (direction === 'LONG' ? 0.99 : 1.01)
    };

    globalState.stats.totalTrades++;
    globalState.marketMemory.consecutiveTrades[coin] = (globalState.marketMemory.consecutiveTrades[coin] || 0) + 1;
    globalState.stats.maxLeverageUsed = Math.max(globalState.stats.maxLeverageUsed, leverage);

    console.log(`‚úÖ –£–°–ü–ï–®–ù–û: ${direction} ${size} ${coin} –Ω–∞ BingX Futures`);
    return true;
  } else {
    console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ BingX Futures`);
    return false;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
// ==========================
async function checkOpenPositions(currentPrices) {
  for (const coin of globalState.watchlist) {
    const position = globalState.positions[coin.name];
    if (!position) continue;

    const currentPrice = currentPrices[coin.name];
    if (!currentPrice) continue;

    let shouldClose = false;
    let reason = '';

    if (position.side === 'LONG' && currentPrice >= position.takeProfit) {
      shouldClose = true;
      reason = 'üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç +3% ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º 50% –ø—Ä–∏–±—ã–ª–∏';
    } else if (position.side === 'SHORT' && currentPrice <= position.takeProfit) {
      shouldClose = true;
      reason = 'üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç +3% ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º 50% –ø—Ä–∏–±—ã–ª–∏';
    }

    if (position.side === 'LONG' && currentPrice <= position.stopLoss) {
      shouldClose = true;
      reason = 'üõë –°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å -2%';
    } else if (position.side === 'SHORT' && currentPrice >= position.stopLoss) {
      shouldClose = true;
      reason = 'üõë –°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å -2%';
    }

    if (shouldClose) {
      console.log(`‚úÖ –ó–ê–ö–†–´–¢–ò–ï: ${reason} –ø–æ ${coin.name}`);
      const trade = globalState.history.find(t => t.coin === coin.name && t.status === 'OPEN');
      if (trade) {
        trade.exitPrice = currentPrice;
        trade.profitPercent = position.side === 'LONG' 
          ? (currentPrice - trade.entryPrice) / trade.entryPrice 
          : (trade.entryPrice - currentPrice) / trade.entryPrice;
        trade.status = 'CLOSED';
        
        if (trade.profitPercent > 0) {
          globalState.stats.profitableTrades++;
          globalState.balance += (trade.size * trade.entryPrice * trade.profitPercent);
        } else {
          globalState.stats.losingTrades++;
          globalState.balance += (trade.size * trade.entryPrice * trade.profitPercent);
        }
      }
      
      globalState.positions[coin.name] = null;
      globalState.marketMemory.consecutiveTrades[coin.name] = 0;
    } else {
      if (position.side === 'LONG' && currentPrice > position.entryPrice * 1.01) {
        position.trailingStop = Math.max(position.trailingStop, currentPrice * 0.99);
      } else if (position.side === 'SHORT' && currentPrice < position.entryPrice * 0.99) {
        position.trailingStop = Math.min(position.trailingStop, currentPrice * 1.01);
      }
    }
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
// ==========================
function showOpenPositionsProgress(currentPrices) {
  console.log(`\nüìä –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò ‚Äî –ü–†–û–ì–†–ï–°–°:`);
  let hasOpen = false;

  for (const coin of globalState.watchlist) {
    const position = globalState.positions[coin.name];
    if (!position) continue;

    const currentPrice = currentPrices[coin.name];
    if (!currentPrice) continue;

    let progress = 0;
    let targetPrice = position.takeProfit;
    let distanceToTarget = 0;

    if (position.side === 'LONG') {
      progress = (currentPrice - position.entryPrice) / (targetPrice - position.entryPrice) * 100;
      distanceToTarget = ((targetPrice - currentPrice) / currentPrice) * 100;
    } else {
      progress = (position.entryPrice - currentPrice) / (position.entryPrice - targetPrice) * 100;
      distanceToTarget = ((currentPrice - targetPrice) / currentPrice) * 100;
    }

    let successProbability = 50;
    if (progress > 0) successProbability = 50 + progress * 0.5;
    if (distanceToTarget < 0) successProbability += 20;
    successProbability = Math.min(95, Math.max(5, successProbability));

    console.log(`\nüìà ${coin.name} ${position.side}:`);
    console.log(`   –í—Ö–æ–¥: $${position.entryPrice.toFixed(2)} | –¢–µ–∫—É—â–∞—è: $${currentPrice.toFixed(2)}`);
    console.log(`   üéØ –¶–µ–ª—å: $${targetPrice.toFixed(2)} (${distanceToTarget > 0 ? '+' : ''}${distanceToTarget.toFixed(2)}% –¥–æ —Ü–µ–ª–∏)`);
    console.log(`   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${Math.min(100, Math.max(0, progress)).toFixed(1)}%`);
    console.log(`   üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: ${successProbability.toFixed(0)}%`);
    console.log(`   üõë –°—Ç–æ–ø: $${position.stopLoss.toFixed(2)} | –¢—Ä–µ–π–ª–∏–Ω–≥: $${position.trailingStop.toFixed(2)}`);
    console.log(`   ‚öñÔ∏è –ü–ª–µ—á–æ: ${position.leverage}x`);

    hasOpen = true;
  }

  if (!hasOpen) console.log(`   –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π`);
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
// ==========================
function printStats() {
  const s = globalState.stats;
  console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–õ–ò:`);
  console.log(`   –°–¥–µ–ª–æ–∫ –≤—Å–µ–≥–æ: ${s.totalTrades} (–ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${s.profitableTrades}, —É–±—ã—Ç–æ—á–Ω—ã—Ö: ${s.losingTrades})`);
  console.log(`   Win Rate: ${s.winRate.toFixed(1)}%`);
  console.log(`   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: $${s.totalProfit.toFixed(2)} (${((s.totalProfit / 100) * 100).toFixed(1)}%)`);
  console.log(`   –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: ${s.maxDrawdown.toFixed(1)}%`);
  console.log(`   –ú–∞–∫—Å. –ø–ª–µ—á–æ: ${s.maxLeverageUsed}x`);
  console.log(`   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: $${globalState.balance.toFixed(2)}`);
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è –¥–µ–º–æ)
// ==========================
function deposit(amount) {
  if (amount <= 0) return false;
  globalState.balance += amount;
  console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ $${amount}. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: $${globalState.balance.toFixed(2)}`);
  return true;
}

// ==========================
// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ‚Äî –¶–ò–ö–õ –ë–û–¢–ê
// ==========================
(async () => {
  console.log('ü§ñ –ó–ê–ü–£–°–ö –ë–û–¢–ê v12.0 ‚Äî –¢–†–ï–ô–î–ò–ù–ì –ë–û–¢ –í–ê–°–Ø 3000 –£–ù–ò–ö–ê–õ–¨–ù–´–ô (–ß–ò–°–¢–´–ô BINGX FUTURES)');
  console.log('üìå deposit(—Å—É–º–º–∞) ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç—å –¥–µ–º–æ-–±–∞–ª–∞–Ω—Å');

  while (globalState.isRunning) {
    try {
      console.log(`\n[${new Date().toLocaleTimeString()}] === –ê–ù–ê–õ–ò–ó –û–¢ –í–ê–°–ò 3000 ===`);

      const fearIndex = await getFearAndGreedIndex();
      console.log(`üò± –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: ${fearIndex}`);

      const currentPrices = await getCurrentFuturesPrices();
      await checkOpenPositions(currentPrices);

      showOpenPositionsProgress(currentPrices);

      let bestOpportunity = null;
      let bestReasoning = [];

      for (const coin of globalState.watchlist) {
        console.log(`\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ—å—é—á–µ—Ä—Å ${coin.name}...`);

        const candles = await getBingXFuturesHistory(coin.name, '1h', 50);
        if (candles.length < 10) {
          console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${coin.name} ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö`);
          await new Promise(r => setTimeout(r, 1200));
          continue;
        }

        const analysis = analyzeFuturesWithWisdom(candles, coin.name, fearIndex);
        if (!analysis || !analysis.signal.direction) {
          await new Promise(r => setTimeout(r, 1200));
          continue;
        }

        console.log(`   ‚úÖ –°–∏–≥–Ω–∞–ª –¥–ª—è ${coin.name}: ${analysis.signal.direction}`);
        analysis.signal.reasoning.forEach(r => console.log(`   ‚Ä¢ ${r}`));

        if (!bestOpportunity) {
          bestOpportunity = analysis;
          bestReasoning = analysis.signal.reasoning;
        }

        await new Promise(r => setTimeout(r, 1200));
      }

      if (bestOpportunity && globalState.balance > 10) {
        console.log(`\nüíé –í–ê–°–Ø 3000 –†–ï–ö–û–ú–ï–ù–î–£–ï–¢: ${bestOpportunity.signal.direction} –ø–æ ${bestOpportunity.coin}`);
        bestReasoning.forEach(r => console.log(`   ‚Ä¢ ${r}`));

        const riskAmount = globalState.balance * globalState.maxRiskPerTrade;
        const price = bestOpportunity.currentPrice;
        const stopDistance = bestOpportunity.signal.direction === 'LONG' 
          ? price - bestOpportunity.signal.stopLoss 
          : bestOpportunity.signal.stopLoss - price;
        
        const size = riskAmount / stopDistance;
        const finalSize = Math.max(0.001, size);

        console.log(`\nüü¢ –í–•–û–î: ${bestOpportunity.signal.direction} ${finalSize.toFixed(6)} ${bestOpportunity.coin} —Å –ø–ª–µ—á–æ–º ${bestOpportunity.signal.leverage}x`);
        await openFuturesTrade(
          bestOpportunity.coin,
          bestOpportunity.signal.direction,
          bestOpportunity.signal.leverage,
          finalSize,
          bestOpportunity.currentPrice,
          bestOpportunity.signal.stopLoss,
          bestOpportunity.signal.takeProfit
        );
      } else {
        console.log(`\n‚ö™ –í–∞—Å—è 3000 –Ω–µ –≤–∏–¥–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ‚Äî –æ—Ç–¥—ã—Ö–∞–µ–º...`);
      }

      globalState.stats.totalProfit = globalState.balance - 100;
      if (globalState.balance > globalState.stats.peakBalance) {
        globalState.stats.peakBalance = globalState.balance;
      }
      globalState.stats.maxDrawdown = ((globalState.stats.peakBalance - globalState.balance) / globalState.stats.peakBalance) * 100;
      globalState.stats.winRate = globalState.stats.totalTrades > 0
        ? (globalState.stats.profitableTrades / globalState.stats.totalTrades) * 100
        : 0;

      if (Date.now() % 60000 < 10000) {
        console.log(`\nüí∞ –î–µ–º–æ-–±–∞–ª–∞–Ω—Å: $${globalState.balance.toFixed(2)}`);
      }

      if (globalState.stats.totalTrades > 0 && globalState.history.length % 2 === 0) {
        printStats();
      }

    } catch (error) {
      console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¶–ò–ö–õ–ï:', error.message);
    }

    console.log(`\nüí§ –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...`);
    await new Promise(r => setTimeout(r, 60000));
  }
})();

// ‚úÖ –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô
module.exports = {
  globalState,
  deposit,
  balance: () => globalState.balance,
  stats: () => globalState.stats,
  history: () => globalState.history
};

global.deposit = deposit;
global.balance = () => globalState.balance;
global.stats = () => globalState.stats;
global.history = () => globalState.history;

console.log('\n‚úÖ –¢—Ä–µ–π–¥–∏–Ω–≥ –ë–æ—Ç –í–∞—Å—è 3000 –£–Ω–∏–∫–∞–ª—å–Ω—ã–π (–ß–∏—Å—Ç—ã–π BingX Futures) –∑–∞–ø—É—â–µ–Ω!');
console.log('–¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û —Å BingX ‚Äî –æ—à–∏–±–æ–∫ 401/429 –Ω–µ –±—É–¥–µ—Ç.');
