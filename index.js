const axios = require('axios');
const CryptoJS = require('crypto-js');

// ==========================
// –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
// ==========================
let globalState = {
  balance: 100,           // –¥–µ–º–æ-–±–∞–ª–∞–Ω—Å
  realBalance: null,      // —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (–ø–æ–ª—É—á–∞–µ–º —Å BingX)
  positions: {},
  history: [],
  stats: {
    totalTrades: 0,
    profitableTrades: 0,
    losingTrades: 0,
    winRate: 0,
    totalProfit: 0,
    maxDrawdown: 0,
    peakBalance: 100,
    maxLeverageUsed: 1
  },
  marketMemory: {
    lastTrades: {},
    consecutiveTrades: {},
    volatilityHistory: {},
    fearSentimentHistory: []
  },
  isRunning: true,
  takerFee: 0.0005,
  maxRiskPerTrade: 0.01,  // 1% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ ‚Äî –°–¢–ê–ë–ò–õ–¨–ù–´–ô –†–ï–ñ–ò–ú
  maxLeverage: 3,         // 3x –ø–ª–µ—á–æ ‚Äî –°–¢–ê–ë–ò–õ–¨–ù–´–ô –†–ï–ñ–ò–ú
  watchlist: [
    { symbol: 'BTC', name: 'bitcoin' },
    { symbol: 'ETH', name: 'ethereum' },
    { symbol: 'BNB', name: 'binancecoin' },
    { symbol: 'SOL', name: 'solana' },
    { symbol: 'XRP', name: 'ripple' },
    { symbol: 'DOGE', name: 'dogecoin' },
    { symbol: 'ADA', name: 'cardano' },
    { symbol: 'DOT', name: 'polkadot' },
    { symbol: 'LINK', name: 'chainlink' }
  ],
  isRealMode: false,      // false = –¥–µ–º–æ, true = —Ä–µ–∞–ª—å–Ω—ã–π
  tradeMode: 'stable',    // 'stable' –∏–ª–∏ 'scalping'
  testMode: false         // –≤—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∏—Å–∫ –¥–ª—è —Ç–µ—Å—Ç–∞
};

globalState.watchlist.forEach(coin => {
  globalState.positions[coin.name] = null;
  globalState.marketMemory.lastTrades[coin.name] = [];
  globalState.marketMemory.consecutiveTrades[coin.name] = 0;
  globalState.marketMemory.volatilityHistory[coin.name] = [];
});

// ==========================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø BINGX API
// ==========================
const BINGX_API_KEY = process.env.BINGX_API_KEY;
const BINGX_SECRET_KEY = process.env.BINGX_SECRET_KEY;
const BINGX_FUTURES_URL = 'https://open-api.bingx.com';

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è BingX
// ==========================
function signBingXRequest(params) {
  const sortedParams = Object.keys(params)
    .sort()
    .map(key => `${key}=${params[key]}`)
    .join('&');
  return CryptoJS.HmacSHA256(sortedParams, BINGX_SECRET_KEY).toString(CryptoJS.enc.Hex);
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å BingX Futures ‚Äî –° –î–ï–¢–ê–õ–¨–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú
// ==========================
async function getBingXRealBalance() {
  try {
    console.log('üîç [–ë–ê–õ–ê–ù–°] –ù–∞—á–∏–Ω–∞—é –∑–∞–ø—Ä–æ—Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
    
    if (!BINGX_API_KEY || !BINGX_SECRET_KEY) {
      console.error('‚ùå [–ë–ê–õ–ê–ù–°] API-–∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return null;
    }

    const timestamp = Date.now();
    const params = { timestamp };
    const signature = signBingXRequest(params);
    const url = `${BINGX_FUTURES_URL}/openApi/swap/v2/user/balance?${new URLSearchParams(params)}&signature=${signature}`;

    console.log('üåê [–ë–ê–õ–ê–ù–°] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫:', url);

    const response = await axios.get(url, {
      headers: { 'X-BX-APIKEY': BINGX_API_KEY },
      timeout: 10000
    });

    console.log('‚úÖ [–ë–ê–õ–ê–ù–°] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç BingX:', response.data);

    if (response.data.code === 0 && response.data.data) {
      const assets = response.data.data.assets || response.data.data;
      const assetsArray = Array.isArray(assets) ? assets : Object.values(assets);
      const usdtAsset = assetsArray.find(asset => asset.asset === 'USDT');
      
      if (usdtAsset && usdtAsset.walletBalance) {
        const balance = parseFloat(usdtAsset.walletBalance);
        console.log(`üí∞ [–ë–ê–õ–ê–ù–°] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: $${balance.toFixed(2)}`);
        return balance;
      } else {
        console.error('‚ùå [–ë–ê–õ–ê–ù–°] –ù–µ –Ω–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å USDT –≤ –æ—Ç–≤–µ—Ç–µ');
      }
    } else {
      console.error('‚ùå [–ë–ê–õ–ê–ù–°] –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç BingX:', response.data.msg || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
    return null;
  } catch (error) {
    console.error('‚ùå [–ë–ê–õ–ê–ù–°] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', error.message);
    return null;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
// ==========================
async function forceUpdateRealBalance() {
  console.log('üîÑ [–ë–ê–õ–ê–ù–°] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
  const balance = await getBingXRealBalance();
  if (balance !== null) {
    globalState.realBalance = balance;
    console.log(`‚úÖ [–ë–ê–õ–ê–ù–°] –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω: $${balance.toFixed(2)}`);
  }
  return balance;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è –¥–µ–º–æ)
// ==========================
function deposit(amount) {
  if (amount <= 0) return false;
  globalState.balance += amount;
  console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ $${amount}. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: $${globalState.balance.toFixed(2)}`);
  return true;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ (–î–ï–ú–û ‚Üî –†–ï–ê–õ–¨–ù–´–ô)
// ==========================
function toggleMode() {
  globalState.isRealMode = !globalState.isRealMode;
  console.log(`üîÑ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞: ${globalState.isRealMode ? '–†–ï–ê–õ–¨–ù–´–ô' : '–î–ï–ú–û'}`);
  
  // –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
  if (globalState.isRealMode) {
    forceUpdateRealBalance();
  }
  
  return globalState.isRealMode;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (stable ‚Üî scalping)
// ==========================
function toggleTradeMode() {
  globalState.tradeMode = globalState.tradeMode === 'stable' ? 'scalping' : 'stable';
  
  if (globalState.tradeMode === 'stable') {
    globalState.maxRiskPerTrade = 0.01;
    globalState.maxLeverage = 3;
    console.log('üìâ –ü–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ –°–¢–ê–ë–ò–õ–¨–ù–´–ô —Ä–µ–∂–∏–º: —Ä–∏—Å–∫ 1%, –ø–ª–µ—á–æ 3x');
  } else {
    globalState.maxRiskPerTrade = 0.02;
    globalState.maxLeverage = 5;
    console.log('‚ö° –ü–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ –°–ö–ê–õ–¨–ü–ò–ù–ì: —Ä–∏—Å–∫ 2%, –ø–ª–µ—á–æ 5x (–í–´–°–û–ö–ò–ô –†–ò–°–ö!)');
  }
  
  return globalState.tradeMode;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –í–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∏—Å–∫)
// ==========================
function toggleTestMode() {
  globalState.testMode = !globalState.testMode;
  
  if (globalState.testMode) {
    globalState.maxRiskPerTrade = 0.05;
    globalState.maxLeverage = 10;
    console.log('üß™ –í–ö–õ–Æ–ß–Å–ù –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: —Ä–∏—Å–∫ 5%, –ø–ª–µ—á–æ 10x (–≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –†–ò–°–ö!)');
  } else {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç tradeMode
    if (globalState.tradeMode === 'stable') {
      globalState.maxRiskPerTrade = 0.01;
      globalState.maxLeverage = 3;
    } else {
      globalState.maxRiskPerTrade = 0.02;
      globalState.maxLeverage = 5;
    }
    console.log('‚úÖ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú –í–´–ö–õ–Æ–ß–ï–ù');
  }
  
  return globalState.testMode;
}

// ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (getFearAndGreedIndex, getCurrentFuturesPrices, getBingXFuturesHistory, analyzeFuturesWithWisdom, calculateATR, calculateRSI, setBingXLeverage, placeBingXFuturesOrder) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–î–ï–ú–û –∏–ª–∏ –†–ï–ê–õ–¨–ù–ê–Ø)
// ==========================
async function openFuturesTrade(coin, direction, leverage, size, price, stopLoss, takeProfit) {
  const symbolMap = {
    'bitcoin': 'BTC-USDT',
    'ethereum': 'ETH-USDT',
    'binancecoin': 'BNB-USDT',
    'solana': 'SOL-USDT',
    'ripple': 'XRP-USDT',
    'dogecoin': 'DOGE-USDT',
    'cardano': 'ADA-USDT',
    'polkadot': 'DOT-USDT',
    'chainlink': 'LINK-USDT'
  };

  const symbol = symbolMap[coin];
  if (!symbol) {
    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è ${coin}`);
    return false;
  }

  const side = direction === 'LONG' ? 'BUY' : 'SELL';
  const positionSide = direction;

  console.log(`üåê –û—Ç–ø—Ä–∞–≤–∫–∞ ${direction} –æ—Ä–¥–µ—Ä–∞ –Ω–∞ BingX Futures: ${size} ${symbol} —Å –ø–ª–µ—á–æ–º ${leverage}x`);
  console.log(`üîÑ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${globalState.isRealMode ? '–†–ï–ê–õ–¨–ù–´–ô' : '–î–ï–ú–û'}`);
  console.log(`‚ö° –¢–æ—Ä–≥–æ–≤—ã–π —Ä–µ–∂–∏–º: ${globalState.tradeMode} (${globalState.testMode ? '–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú –í–ö–õ–Æ–ß–ï–ù' : '–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π'})`);

  if (globalState.isRealMode) {
    // –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
    const result = await placeBingXFuturesOrder(symbol, side, positionSide, 'MARKET', size, null, leverage);

    if (result) {
      const trade = {
        coin,
        type: direction,
        size,
        entryPrice: price,
        currentPrice: price, // –¥–æ–±–∞–≤–∏–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        leverage,
        stopLoss,
        takeProfit,
        fee: 0,
        timestamp: new Date().toLocaleString(),
        status: 'OPEN',
        orderId: result.orderId,
        progress: 0, // –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        probability: 50 // –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
      };

      globalState.history.push(trade);
      globalState.positions[coin] = {
        ...trade,
        trailingStop: price * (direction === 'LONG' ? 0.99 : 1.01)
      };

      globalState.stats.totalTrades++;
      globalState.marketMemory.consecutiveTrades[coin] = (globalState.marketMemory.consecutiveTrades[coin] || 0) + 1;
      globalState.stats.maxLeverageUsed = Math.max(globalState.stats.maxLeverageUsed, leverage);

      console.log(`‚úÖ –£–°–ü–ï–®–ù–û: ${direction} ${size} ${coin} –Ω–∞ BingX Futures`);
      return true;
    } else {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ BingX Futures`);
      return false;
    }
  } else {
    // –î–µ–º–æ-—Ç–æ—Ä–≥–æ–≤–ª—è
    const cost = (size * price) / leverage;
    const fee = size * price * globalState.takerFee;

    if (cost + fee > globalState.balance * globalState.maxRiskPerTrade) {
      console.log(`‚ùå –†–∏—Å–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${globalState.maxRiskPerTrade * 100}% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞`);
      return false;
    }

    globalState.balance -= fee;
    const trade = {
      coin,
      type: direction,
      size,
      entryPrice: price,
      currentPrice: price,
      leverage,
      stopLoss,
      takeProfit,
      fee,
      timestamp: new Date().toLocaleString(),
      status: 'OPEN',
      progress: 0,
      probability: 50
    };

    globalState.history.push(trade);
    globalState.positions[coin] = {
      ...trade,
      trailingStop: price * (direction === 'LONG' ? 0.99 : 1.01)
    };

    globalState.stats.totalTrades++;
    globalState.marketMemory.consecutiveTrades[coin] = (globalState.marketMemory.consecutiveTrades[coin] || 0) + 1;
    globalState.stats.maxLeverageUsed = Math.max(globalState.stats.maxLeverageUsed, leverage);

    console.log(`‚úÖ –î–ï–ú–û: ${direction} ${size} ${coin} —Å –ø–ª–µ—á–æ–º ${leverage}x`);
    return true;
  }
}

// ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (checkOpenPositions, showOpenPositionsProgress, printStats, sendPushNotification) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

// ==========================
// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ‚Äî –¶–ò–ö–õ –ë–û–¢–ê
// ==========================
(async () => {
  console.log('ü§ñ –ó–ê–ü–£–°–ö –ë–û–¢–ê v14.0 ‚Äî –¢–†–ï–ô–î–ò–ù–ì –ë–û–¢ –í–ê–°–Ø 3000 –£–ù–ò–ö–ê–õ–¨–ù–´–ô');
  console.log('üìå deposit(—Å—É–º–º–∞) ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç—å –¥–µ–º–æ-–±–∞–ª–∞–Ω—Å');
  console.log('üîÑ toggleMode() ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º (–î–ï–ú–û ‚Üî –†–ï–ê–õ–¨–ù–´–ô)');
  console.log('‚ö° toggleTradeMode() ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Ä–µ–∂–∏–º (stable ‚Üî scalping)');
  console.log('üß™ toggleTestMode() ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (—Ä–∏—Å–∫ 5%, –ø–ª–µ—á–æ 10x)');

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  await forceUpdateRealBalance();

  while (globalState.isRunning) {
    try {
      console.log(`\n[${new Date().toLocaleTimeString()}] === –ê–ù–ê–õ–ò–ó –û–¢ –í–ê–°–ò 3000 ===`);

      const fearIndex = await getFearAndGreedIndex();
      console.log(`üò± –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: ${fearIndex}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      if (Date.now() % 300000 < 10000) {
        await forceUpdateRealBalance();
      }

      const currentPrices = await getCurrentFuturesPrices();
      await checkOpenPositions(currentPrices);

      showOpenPositionsProgress(currentPrices);

      let bestOpportunity = null;
      let bestReasoning = [];

      for (const coin of globalState.watchlist) {
        console.log(`\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ—å—é—á–µ—Ä—Å ${coin.name}...`);

        const candles = await getBingXFuturesHistory(coin.name, '1h', 50);
        if (candles.length < 10) {
          console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${coin.name} ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö`);
          await new Promise(r => setTimeout(r, 1200));
          continue;
        }

        const analysis = analyzeFuturesWithWisdom(candles, coin.name, fearIndex);
        if (!analysis || !analysis.signal.direction) {
          await new Promise(r => setTimeout(r, 1200));
          continue;
        }

        console.log(`   ‚úÖ –°–∏–≥–Ω–∞–ª –¥–ª—è ${coin.name}: ${analysis.signal.direction}`);
        analysis.signal.reasoning.forEach(r => console.log(`   ‚Ä¢ ${r}`));

        if (!bestOpportunity) {
          bestOpportunity = analysis;
          bestReasoning = analysis.signal.reasoning;
        }

        await new Promise(r => setTimeout(r, 1200));
      }

      if (bestOpportunity && (globalState.isRealMode || globalState.balance > 10)) {
        console.log(`\nüíé –í–ê–°–Ø 3000 –†–ï–ö–û–ú–ï–ù–î–£–ï–¢: ${bestOpportunity.signal.direction} –ø–æ ${bestOpportunity.coin}`);
        bestReasoning.forEach(r => console.log(`   ‚Ä¢ ${r}`));

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ, –¥–µ–º–æ ‚Äî –≤ –¥–µ–º–æ
        const currentBalance = globalState.isRealMode ? (globalState.realBalance || 100) : globalState.balance;
        const riskAmount = currentBalance * globalState.maxRiskPerTrade;
        const price = bestOpportunity.currentPrice;
        const stopDistance = bestOpportunity.signal.direction === 'LONG' 
          ? price - bestOpportunity.signal.stopLoss 
          : bestOpportunity.signal.stopLoss - price;
        
        const size = riskAmount / stopDistance;
        const finalSize = Math.max(0.001, size);

        console.log(`\nüü¢ –í–•–û–î: ${bestOpportunity.signal.direction} ${finalSize.toFixed(6)} ${bestOpportunity.coin} —Å –ø–ª–µ—á–æ–º ${bestOpportunity.signal.leverage}x`);
        await openFuturesTrade(
          bestOpportunity.coin,
          bestOpportunity.signal.direction,
          bestOpportunity.signal.leverage,
          finalSize,
          bestOpportunity.currentPrice,
          bestOpportunity.signal.stopLoss,
          bestOpportunity.signal.takeProfit
        );
      } else {
        console.log(`\n‚ö™ –í–∞—Å—è 3000 –Ω–µ –≤–∏–¥–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ‚Äî –æ—Ç–¥—ã—Ö–∞–µ–º...`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞)
      if (!globalState.isRealMode) {
        globalState.stats.totalProfit = globalState.balance - 100;
        if (globalState.balance > globalState.stats.peakBalance) {
          globalState.stats.peakBalance = globalState.balance;
        }
        globalState.stats.maxDrawdown = ((globalState.stats.peakBalance - globalState.balance) / globalState.stats.peakBalance) * 100;
      }

      globalState.stats.winRate = globalState.stats.totalTrades > 0
        ? (globalState.stats.profitableTrades / globalState.stats.totalTrades) * 100
        : 0;

      if (Date.now() % 60000 < 10000) {
        console.log(`\nüí∞ ${globalState.isRealMode ? '–†–µ–∞–ª—å–Ω—ã–π' : '–î–µ–º–æ'}-–±–∞–ª–∞–Ω—Å: $${(globalState.isRealMode ? globalState.realBalance : globalState.balance)?.toFixed(2) || '–ó–∞–≥—Ä—É–∑–∫–∞...'}`);
      }

      if (globalState.stats.totalTrades > 0 && globalState.history.length % 2 === 0) {
        printStats();
      }

    } catch (error) {
      console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¶–ò–ö–õ–ï:', error.message);
    }

    console.log(`\nüí§ –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...`);
    await new Promise(r => setTimeout(r, 60000));
  }
})();

// ‚úÖ –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô
module.exports = {
  globalState,
  deposit,
  toggleMode,
  toggleTradeMode,
  toggleTestMode,
  forceUpdateRealBalance, // –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  balance: () => globalState.balance,
  stats: () => globalState.stats,
  history: () => globalState.history
};

global.deposit = deposit;
global.toggleMode = toggleMode;
global.toggleTradeMode = toggleTradeMode;
global.toggleTestMode = toggleTestMode;
global.forceUpdateRealBalance = forceUpdateRealBalance;
global.balance = () => globalState.balance;
global.stats = () => globalState.stats;
global.history = () => globalState.history;

console.log('\n‚úÖ –¢—Ä–µ–π–¥–∏–Ω–≥ –ë–æ—Ç –í–∞—Å—è 3000 –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—â–µ–Ω!');
console.log('–ò—Å–ø–æ–ª—å–∑—É–π toggleMode() –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –î–ï–ú–û –∏ –†–ï–ê–õ–¨–ù–´–ú —Ä–µ–∂–∏–º–æ–º.');
console.log('–ò—Å–ø–æ–ª—å–∑—É–π toggleTradeMode() –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Ä–µ–∂–∏–º–∞–º–∏.');
console.log('–ò—Å–ø–æ–ª—å–∑—É–π toggleTestMode() –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∏—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∞!).');
