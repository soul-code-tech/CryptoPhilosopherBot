const axios = require('axios');

// ==========================
// –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ‚Äî –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ï–ô–î–ï–†–°–ö–ò–ô –ë–û–¢ (BINGX –í–ï–†–°–ò–Ø)
// ==========================
let globalState = {
  balance: 10,
  positions: {},
  history: [],
  stats: {
    totalTrades: 0,
    profitableTrades: 0,
    losingTrades: 0,
    winRate: 0,
    totalProfit: 0,
    maxDrawdown: 0,
    peakBalance: 10
  },
  marketMemory: {
    lastBuyPrices: {},
    consecutiveBuys: {},
    fearSentimentHistory: []
  },
  isRunning: true,
  makerFee: 0.001,
  takerFee: 0.001,
  watchlist: [
    { symbol: 'BTC', name: 'bitcoin' },
    { symbol: 'ETH', name: 'ethereum' },
    { symbol: 'BNB', name: 'binancecoin' },
    { symbol: 'SOL', name: 'solana' },
    { symbol: 'XRP', name: 'ripple' },
    { symbol: 'DOGE', name: 'dogecoin' },
    { symbol: 'ADA', name: 'cardano' },
    { symbol: 'DOT', name: 'polkadot' },
    { symbol: 'LINK', name: 'chainlink' },
    { symbol: 'MATIC', name: 'matic-network' }
  ]
};

globalState.watchlist.forEach(coin => {
  globalState.positions[coin.name] = 0;
  globalState.marketMemory.lastBuyPrices[coin.name] = [];
  globalState.marketMemory.consecutiveBuys[coin.name] = 0;
});

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
// ==========================
function deposit(amount) {
  if (amount <= 0) return false;
  globalState.balance += amount;
  console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ $${amount}. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: $${globalState.balance.toFixed(2)}`);
  return true;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ Fear & Greed Index
// ==========================
async function getFearAndGreedIndex() {
  try {
    const response = await axios.get('https://api.alternative.me/fng/?limit=1', { timeout: 10000 });
    const value = parseInt(response.data.data[0].value);
    globalState.marketMemory.fearSentimentHistory.push({ value, timestamp: Date.now() });
    if (globalState.marketMemory.fearSentimentHistory.length > 24) {
      globalState.marketMemory.fearSentimentHistory.shift();
    }
    return value;
  } catch (e) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º 50');
    return 50;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω —Å BingX ‚Äî –° –ó–ê–©–ò–¢–û–ô
// ==========================
async function getCurrentPrices() {
  try {
    const response = await axios.get('https://open-api.bingx.com/openApi/spot/v1/ticker/price', { timeout: 10000 });

    // üîí –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    if (!response.data || !response.data.data || !Array.isArray(response.data.data)) {
      console.error('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç BingX –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω:', response.data);
      return {};
    }

    const prices = {};
    for (const ticker of response.data.data) {
      if (!ticker.symbol || !ticker.price) continue;

      const coinSymbol = ticker.symbol.replace('-USDT', '').toLowerCase();
      let coinName = '';
      switch(coinSymbol) {
        case 'btc': coinName = 'bitcoin'; break;
        case 'eth': coinName = 'ethereum'; break;
        case 'bnb': coinName = 'binancecoin'; break;
        case 'sol': coinName = 'solana'; break;
        case 'xrp': coinName = 'ripple'; break;
        case 'doge': coinName = 'dogecoin'; break;
        case 'ada': coinName = 'cardano'; break;
        case 'dot': coinName = 'polkadot'; break;
        case 'link': coinName = 'chainlink'; break;
        case 'matic': coinName = 'matic-network'; break;
        default: continue;
      }
      prices[coinName] = parseFloat(ticker.price);
    }
    return prices;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Å BingX:', error.message);
    return {};
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π —Å BingX ‚Äî –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø
// ==========================
async function getBingXHistory(symbol, interval = '1h', limit = 50) {
  try {
    const symbolMap = {
      'bitcoin': 'BTC',
      'ethereum': 'ETH',
      'binancecoin': 'BNB',
      'solana': 'SOL',
      'ripple': 'XRP',
      'dogecoin': 'DOGE',
      'cardano': 'ADA',
      'polkadot': 'DOT',
      'chainlink': 'LINK',
      'matic-network': 'MATIC'
    };

    const baseSymbol = symbolMap[symbol] || symbol.toUpperCase().replace('-NETWORK', '').replace('COIN', '');
    const bingxSymbol = baseSymbol + '-USDT';

    const response = await axios.get('https://open-api.bingx.com/openApi/spot/v1/market/kline', {
      params: {
        symbol: bingxSymbol,
        interval: interval,
        limit: limit
      },
      timeout: 10000
    });

    if (!response.data || !response.data.data || !Array.isArray(response.data.data)) {
      console.error(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç BingX –¥–ª—è ${symbol}:`, response.data);
      return [];
    }

    return response.data.data.map(candle => ({
      price: parseFloat(candle.close),
      time: candle.time
    }));

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è ${symbol} —Å BingX:`, error.message);
    return [];
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ ‚Äî —Å —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π —Ä—ã–Ω–∫–∞ (–ª–æ–≥–∏–∫–∞ –ù–ï –ò–ó–ú–ï–ù–ï–ù–ê)
// ==========================
function analyzeCoinWithWisdom(candles, coinName, currentFearIndex) {
  if (candles.length < 10) return null;

  const prices = candles.map(c => c.price);
  const currentPrice = prices[prices.length - 1];
  const sma10 = prices.slice(-10).reduce((a, b) => a + b, 0) / 10;
  const sma30 = prices.slice(-30).reduce((a, b) => a + b, 0) / 30;
  const mean = prices.reduce((a, b) => a + b, 0) / prices.length;
  const variance = prices.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / prices.length;
  const stdDev = Math.sqrt(variance);

  const isExtremeFear = currentFearIndex < 25;
  const isExtremeGreed = currentFearIndex > 75;

  let upCount = 0;
  for (let i = prices.length - 6; i < prices.length - 1; i++) {
    if (prices[i + 1] > prices[i]) upCount++;
  }
  const trendProbability = upCount / 5;
  const expectedReturn = (currentPrice - sma30) / sma30;

  const buyZone = sma30 - stdDev * 0.5;
  const sellZone = sma30 + stdDev * 0.5;
  const isBuyZone = currentPrice <= buyZone;
  const isSellZone = currentPrice >= sellZone;

  let wisdom = {
    shouldBuy: false,
    shouldSell: false,
    positionSizeFactor: 1.0,
    reasoning: []
  };

  if (isExtremeFear && currentPrice > sma30) {
    wisdom.shouldBuy = true;
    wisdom.reasoning.push("‚òØÔ∏è –ò–Ω—å-–Ø–Ω: —Å—Ç—Ä–∞—Ö –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ + —Ü–µ–Ω–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π ‚Üí –∏–¥–µ–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞");
  }

  if (trendProbability > 0.7 && currentPrice > sma10) {
    wisdom.shouldBuy = true;
    wisdom.reasoning.push("üöÄ –ò–Ω–µ—Ä—Ü–∏—è: —Å–∏–ª—å–Ω—ã–π –∏–º–ø—É–ª—å—Å + —Ü–µ–Ω–∞ –≤—ã—à–µ SMA10 ‚Üí —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è");
  }

  if (isExtremeGreed && currentPrice >= sellZone) {
    wisdom.shouldSell = true;
    wisdom.reasoning.push("üî• –ü–µ—Ä–µ–≥—Ä–µ–≤: –∂–∞–¥–Ω–æ—Å—Ç—å + —Ü–µ–Ω–∞ –≤ –∑–æ–Ω–µ –ø—Ä–æ–¥–∞–∂ ‚Üí —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å");
  }

  const consecutiveBuys = globalState.marketMemory.consecutiveBuys[coinName] || 0;
  if (consecutiveBuys >= 3) {
    wisdom.positionSizeFactor = 0.5;
    wisdom.reasoning.push("ü¶é –ê–¥–∞–ø—Ç–∞—Ü–∏—è: 3+ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥—Ä—è–¥ ‚Üí —Å–Ω–∏–∂–∞–µ–º —Ä–∏—Å–∫");
  }

  if (stdDev / mean > 0.05) {
    wisdom.positionSizeFactor *= 0.7;
    wisdom.reasoning.push("üåÄ –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å: –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ‚Üí —Å–Ω–∏–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏—é");
  }

  return {
    coin: coinName,
    currentPrice,
    shouldBuy: wisdom.shouldBuy,
    shouldSell: wisdom.shouldSell,
    positionSizeFactor: wisdom.positionSizeFactor,
    reasoning: wisdom.reasoning,
    trendProbability,           // ‚Üê –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–¥–∞ (0.0 - 1.0)
    expectedReturn,             // ‚Üê –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
    isBuyZone,
    isSellZone,
    fearIndex: currentFearIndex
  };
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ–º–æ-–ø–æ–∑–∏—Ü–∏–∏
// ==========================
function openDemoTrade(coin, action, size, price, fees, targetProfitPercent = 0.01) {
  if (action !== 'BUY' && action !== 'SELL') return false;

  const cost = size * price;
  const fee = cost * fees;

  if (action === 'BUY') {
    if (globalState.balance < cost + fee) {
      console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${coin}: –Ω—É–∂–Ω–æ $${(cost + fee).toFixed(2)}`);
      return false;
    }

    globalState.balance -= (cost + fee);
    globalState.positions[coin] += size;
    globalState.marketMemory.lastBuyPrices[coin].push(price);
    globalState.marketMemory.consecutiveBuys[coin] = (globalState.marketMemory.consecutiveBuys[coin] || 0) + 1;

    const trade = {
      coin,
      type: 'LONG',
      size,
      entryPrice: price,
      targetPrice: price * (1 + targetProfitPercent),
      stopLossPrice: price * 0.995,
      fee,
      timestamp: new Date().toLocaleString(),
      balanceBefore: globalState.balance + cost + fee,
      balanceAfter: globalState.balance,
      status: 'OPEN',
      trendProbability: 0.5 // –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ
    };

    globalState.history.push(trade);
    globalState.stats.totalTrades++;

    console.log(`‚úÖ –û–¢–ö–†–´–¢ –õ–û–ù–ì: ${size.toFixed(6)} ${coin} –ø–æ $${price.toFixed(2)}`);
    console.log(`   üéØ –¶–µ–ª—å: $${trade.targetPrice.toFixed(2)} (+${targetProfitPercent * 100}%)`);
    console.log(`   üõë –°—Ç–æ–ø: $${trade.stopLossPrice.toFixed(2)} (-0.5%)`);
    console.log(`   üí∏ –ö–æ–º–∏—Å—Å–∏—è: $${fee.toFixed(4)}`);
    return true;
  }

  if (action === 'SELL' && globalState.positions[coin] >= size) {
    const revenue = size * price;
    const fee = revenue * fees;

    globalState.balance += (revenue - fee);
    globalState.positions[coin] -= size;
    globalState.marketMemory.consecutiveBuys[coin] = 0;

    const openTrade = globalState.history.find(t => t.coin === coin && t.status === 'OPEN');
    if (openTrade) {
      openTrade.exitPrice = price;
      openTrade.profitPercent = (price - openTrade.entryPrice) / openTrade.entryPrice;
      openTrade.status = 'CLOSED';
    }

    const trade = {
      coin,
      type: 'SELL',
      size,
      price,
      fee,
      timestamp: new Date().toLocaleString(),
      balanceBefore: globalState.balance - revenue + fee,
      balanceAfter: globalState.balance
    };

    globalState.history.push(trade);
    globalState.stats.totalTrades++;

    if (trade.balanceAfter > trade.balanceBefore) {
      globalState.stats.profitableTrades++;
    } else {
      globalState.stats.losingTrades++;
    }

    globalState.stats.winRate = globalState.stats.totalTrades > 0
      ? (globalState.stats.profitableTrades / globalState.stats.totalTrades) * 100
      : 0;

    globalState.stats.totalProfit = globalState.balance - 10;
    if (globalState.balance > globalState.stats.peakBalance) {
      globalState.stats.peakBalance = globalState.balance;
    }
    globalState.stats.maxDrawdown = ((globalState.stats.peakBalance - globalState.balance) / globalState.stats.peakBalance) * 100;

    console.log(`‚úÖ –ó–ê–ö–†–´–¢ –õ–û–ù–ì: ${size.toFixed(6)} ${coin} –ø–æ $${price.toFixed(2)}`);
    console.log(`   üí∞ –ü—Ä–∏–±—ã–ª—å: ${(openTrade?.profitPercent * 100).toFixed(2)}%`);
    console.log(`   üí∏ –ö–æ–º–∏—Å—Å–∏—è: $${fee.toFixed(4)}`);
    return true;
  }

  return false;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
// ==========================
async function checkOpenPositions(currentPrices) {
  const fearIndex = await getFearAndGreedIndex();

  for (const coin of globalState.watchlist) {
    const openTrade = globalState.history.find(t => t.coin === coin.name && t.status === 'OPEN');
    if (!openTrade) continue;

    const currentPrice = currentPrices[coin.name];
    if (!currentPrice) continue;

    const profitPercent = (currentPrice - openTrade.entryPrice) / openTrade.entryPrice;

    if (currentPrice >= openTrade.targetPrice) {
      console.log(`üéØ –î–û–°–¢–ò–ì–ù–£–¢–ê –¶–ï–õ–¨ +1% –ø–æ ${coin.name} ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å!`);
      openDemoTrade(coin.name, 'SELL', globalState.positions[coin.name], currentPrice, globalState.takerFee);
    } else if (fearIndex < 20 && profitPercent > 0.005) {
      console.log(`üò± –°—Ç—Ä–∞—Ö <20 + –ø—Ä–∏–±—ã–ª—å ‚Üí —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ ${coin.name} (–∑–∞–∫–æ–Ω –ò–Ω—å-–Ø–Ω)`);
      openDemoTrade(coin.name, 'SELL', globalState.positions[coin.name], currentPrice, globalState.takerFee);
    } else if (currentPrice <= openTrade.stopLossPrice) {
      console.log(`üõë –°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å -0.5% –ø–æ ${coin.name}`);
      openDemoTrade(coin.name, 'SELL', globalState.positions[coin.name], currentPrice, globalState.takerFee);
    }
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π ‚Äî –° –í–ï–†–û–Ø–¢–ù–û–°–¢–¨–Æ –£–°–ü–ï–•–ê
// ==========================
function showOpenPositionsProgress(currentPrices) {
  console.log(`\nüìä –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò ‚Äî –ü–†–û–ì–†–ï–°–°:`);
  let hasOpen = false;

  for (const coin of globalState.watchlist) {
    const openTrade = globalState.history.find(t => t.coin === coin.name && t.status === 'OPEN');
    if (!openTrade) continue;

    const currentPrice = currentPrices[coin.name];
    if (!currentPrice) continue;

    const progressToTarget = (currentPrice - openTrade.entryPrice) / (openTrade.targetPrice - openTrade.entryPrice) * 100;
    const distanceToTarget = ((openTrade.targetPrice - currentPrice) / currentPrice) * 100;

    // üî• –†–ê–°–ß–Å–¢ –í–ï–†–û–Ø–¢–ù–û–°–¢–ò –£–°–ü–ï–®–ù–û–ì–û –ó–ê–í–ï–†–®–ï–ù–ò–Ø
    let successProbability = 50; // –±–∞–∑–æ–≤–∞—è
    if (progressToTarget > 0) successProbability += progressToTarget * 0.5;
    if (distanceToTarget < 0) successProbability += 20; // —É–∂–µ –≤ –ø–ª—é—Å–µ
    successProbability = Math.min(95, Math.max(5, successProbability));

    console.log(`\nüìà ${coin.name}:`);
    console.log(`   –í—Ö–æ–¥: $${openTrade.entryPrice.toFixed(2)} | –¢–µ–∫—É—â–∞—è: $${currentPrice.toFixed(2)}`);
    console.log(`   üéØ –¶–µ–ª—å: $${openTrade.targetPrice.toFixed(2)} (${distanceToTarget > 0 ? '+' : ''}${distanceToTarget.toFixed(2)}% –¥–æ —Ü–µ–ª–∏)`);
    console.log(`   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${Math.min(100, Math.max(0, progressToTarget)).toFixed(1)}%`);
    console.log(`   üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: ${successProbability.toFixed(0)}%`); // ‚Üê –ù–û–í–´–ô –ò–ù–î–ò–ö–ê–¢–û–†!
    console.log(`   üõë –°—Ç–æ–ø: $${openTrade.stopLossPrice.toFixed(2)}`);

    hasOpen = true;
  }

  if (!hasOpen) console.log(`   –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π`);
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
// ==========================
function printStats() {
  const s = globalState.stats;
  console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–õ–ò:`);
  console.log(`   –°–¥–µ–ª–æ–∫ –≤—Å–µ–≥–æ: ${s.totalTrades} (–ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${s.profitableTrades}, —É–±—ã—Ç–æ—á–Ω—ã—Ö: ${s.losingTrades})`);
  console.log(`   Win Rate: ${s.winRate.toFixed(1)}%`);
  console.log(`   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: $${s.totalProfit.toFixed(2)} (${((s.totalProfit / 10) * 100).toFixed(1)}%)`);
  console.log(`   –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: ${s.maxDrawdown.toFixed(1)}%`);
  console.log(`   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: $${globalState.balance.toFixed(2)}`);
}

// ==========================
// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ‚Äî –¶–ò–ö–õ –ë–û–¢–ê
// ==========================
(async () => {
  console.log('ü§ñ –ó–ê–ü–£–°–ö –ë–û–¢–ê v5.0 ‚Äî –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ï–ô–î–ï–†–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (BINGX)');
  console.log('üìå deposit(—Å—É–º–º–∞) ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ REPL');
  console.log('üìà LONG —Å —Ü–µ–ª—è–º–∏, —Å—Ç–æ–ø–∞–º–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —É—Å–ø–µ—Ö–∞');

  while (globalState.isRunning) {
    try {
      console.log(`\n[${new Date().toLocaleTimeString()}] === –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ï–ô–î–ï–†–°–ö–ò–ô –ê–ù–ê–õ–ò–ó ===`);

      const fearIndex = await getFearAndGreedIndex();
      console.log(`üò± –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: ${fearIndex}`);

      const currentPrices = await getCurrentPrices();
      await checkOpenPositions(currentPrices);

      showOpenPositionsProgress(currentPrices);

      let bestOpportunity = null;
      let bestReasoning = [];

      for (const coin of globalState.watchlist) {
        const candles = await getBingXHistory(coin.name, '1h', 50);
        if (candles.length < 10) continue;

        const analysis = analyzeCoinWithWisdom(candles, coin.name, fearIndex);
        if (!analysis) continue;

        console.log(`\nüîç ${coin.name}:`);
        analysis.reasoning.forEach(r => console.log(`   ‚Ä¢ ${r}`));

        if (analysis.shouldBuy && !bestOpportunity) {
          bestOpportunity = analysis;
          bestReasoning = analysis.reasoning;
        }

        await new Promise(r => setTimeout(r, 800));
      }

      if (bestOpportunity && globalState.balance > 1) {
        console.log(`\nüíé –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –í–´–í–û–î: ${bestOpportunity.coin}`);
        bestReasoning.forEach(r => console.log(`   ‚Ä¢ ${r}`));

        const baseSize = (globalState.balance * 0.2) / bestOpportunity.currentPrice;
        const finalSize = baseSize * bestOpportunity.positionSizeFactor;

        if (finalSize > 0) {
          console.log(`\nüü¢ –í–•–û–î: –ø–æ–∫—É–ø–∞–µ–º ${finalSize.toFixed(6)} ${bestOpportunity.coin}`);
          openDemoTrade(bestOpportunity.coin, 'BUY', finalSize, bestOpportunity.currentPrice, globalState.takerFee, 0.01);
        }
      } else {
        console.log(`\n‚ö™ –ù–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ‚Äî –∂–¥—ë–º...`);
      }

      if (Date.now() % 60000 < 10000) {
        console.log(`\nüí∞ –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°: $${globalState.balance.toFixed(2)}`);
        for (const coin of globalState.watchlist) {
          if (globalState.positions[coin.name] > 0) {
            const avgPrice = globalState.marketMemory.lastBuyPrices[coin.name].reduce((a, b) => a + b, 0) / globalState.marketMemory.lastBuyPrices[coin.name].length || 0;
            console.log(`   ‚Üí ${coin.name}: ${globalState.positions[coin.name].toFixed(6)} @ $${avgPrice.toFixed(2)}`);
          }
        }
      }

      if (globalState.stats.totalTrades > 0 && globalState.history.length % 3 === 0) {
        printStats();
      }

    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ:', error.message);
    }

    await new Promise(r => setTimeout(r, 60000));
  }
})();

module.exports = {
  globalState,
  deposit
};

global.deposit = deposit;
global.balance = () => globalState.balance;
global.stats = () => globalState.stats;
global.history = () => globalState.history;

console.log('\n‚úÖ –ë–æ—Ç v5.0 "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¢—Ä–µ–π–¥–µ—Ä—Å–∫–∏–π –ê–Ω–∞–ª–∏—Ç–∏–∫" –∑–∞–ø—É—â–µ–Ω!');
console.log('–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫—É—é –ª–æ–≥–∏–∫—É, –Ω–æ –≥–æ–≤–æ—Ä–∏—Ç –Ω–∞ —è–∑—ã–∫–µ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤.');
