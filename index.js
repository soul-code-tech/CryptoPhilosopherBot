const axios = require('axios');
const CryptoJS = require('crypto-js');

// ==========================
// –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
// ==========================
let globalState = {
  balance: 100,
  realBalance: null,
  positions: {},
  history: [],
  stats: {
    totalTrades: 0,
    profitableTrades: 0,
    losingTrades: 0,
    winRate: 0,
    totalProfit: 0,
    maxDrawdown: 0,
    peakBalance: 100,
    maxLeverageUsed: 1
  },
  marketMemory: {
    lastTrades: {},
    consecutiveTrades: {},
    volatilityHistory: {},
    fearSentimentHistory: [],
    marketNews: []
  },
  isRunning: true,
  takerFee: 0.0005, // –ö–æ–º–∏—Å—Å–∏—è —Ç–µ–π–∫–µ—Ä–∞ (0.05%)
  makerFee: 0.0002, // –ö–æ–º–∏—Å—Å–∏—è –º–µ–π–∫–µ—Ä–∞ (0.02%)
  maxRiskPerTrade: 0.01,  // 1% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
  maxLeverage: 3,         // 3x –ø–ª–µ—á–æ
  watchlist: [
    { symbol: 'BTC', name: 'bitcoin' },
    { symbol: 'ETH', name: 'ethereum' },
    { symbol: 'BNB', name: 'binancecoin' },
    { symbol: 'SOL', name: 'solana' },
    { symbol: 'XRP', name: 'ripple' },
    { symbol: 'DOGE', name: 'dogecoin' },
    { symbol: 'ADA', name: 'cardano' },
    { symbol: 'DOT', name: 'polkadot' },
    { symbol: 'LINK', name: 'chainlink' },
    // –î–æ–±–∞–≤–ª—è–µ–º 10 –Ω–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    { symbol: 'AVAX', name: 'avalanche' },
    { symbol: 'ATOM', name: 'cosmos' },
    { symbol: 'UNI', name: 'uniswap' },
    { symbol: 'AAVE', name: 'aave' },
    { symbol: 'FIL', name: 'filecoin' },
    { symbol: 'LTC', name: 'litecoin' },
    { symbol: 'ALGO', name: 'algorand' },
    { symbol: 'NEAR', name: 'near' },
    { symbol: 'APT', name: 'aptos' },
    { symbol: 'PENGU', name: 'pengu' } // –ó–∞–º–µ–Ω—è–µ–º MATIC –Ω–∞ PENGU
  ],
  isRealMode: false,
  tradeMode: 'stable',    // 'stable' –∏–ª–∏ 'scalping'
  riskLevel: 'recommended', // 'recommended', 'medium', 'high', 'extreme'
  testMode: false,
  currentPrices: {},
  fearIndex: 50
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
globalState.watchlist.forEach(coin => {
  globalState.positions[coin.name] = null;
  globalState.marketMemory.lastTrades[coin.name] = [];
  globalState.marketMemory.consecutiveTrades[coin.name] = 0;
  globalState.marketMemory.volatilityHistory[coin.name] = [];
});

// ==========================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø BINGX API
// ==========================
const BINGX_API_KEY = process.env.BINGX_API_KEY;
const BINGX_SECRET_KEY = process.env.BINGX_SECRET_KEY;
const BINGX_FUTURES_URL = 'https://open-api.bingx.com';

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è BingX
// ==========================
function signBingXRequest(params) {
  const sortedParams = Object.keys(params)
    .sort()
    .map(key => `${key}=${params[key]}`)
    .join('&');
  return CryptoJS.HmacSHA256(sortedParams, BINGX_SECRET_KEY).toString(CryptoJS.enc.Hex);
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ Fear & Greed Index
// ==========================
async function getFearAndGreedIndex() {
  try {
    const response = await axios.get('https://api.alternative.me/fng/?limit=1', { timeout: 10000 });
    const value = parseInt(response.data.data[0].value);
    globalState.marketMemory.fearSentimentHistory.push({ value, timestamp: Date.now() });
    if (globalState.marketMemory.fearSentimentHistory.length > 24) {
      globalState.marketMemory.fearSentimentHistory.shift();
    }
    globalState.fearIndex = value;
    return value;
  } catch (e) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º 50');
    globalState.fearIndex = 50;
    return 50;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å BingX Futures
// ==========================
async function getBingXRealBalance() {
  try {
    console.log('üîç [–ë–ê–õ–ê–ù–°] –ù–∞—á–∏–Ω–∞—é –∑–∞–ø—Ä–æ—Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
    
    if (!BINGX_API_KEY || !BINGX_SECRET_KEY) {
      console.error('‚ùå [–ë–ê–õ–ê–ù–°] API-–∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return null;
    }

    const timestamp = Date.now();
    const params = { timestamp };
    const signature = signBingXRequest(params);
    const url = `${BINGX_FUTURES_URL}/openApi/swap/v2/user/balance?${new URLSearchParams(params)}&signature=${signature}`;

    console.log('üåê [–ë–ê–õ–ê–ù–°] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫:', url);

    const response = await axios.get(url, {
      headers: { 'X-BX-APIKEY': BINGX_API_KEY },
      timeout: 10000
    });

    console.log('‚úÖ [–ë–ê–õ–ê–ù–°] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç BingX:', JSON.stringify(response.data, null, 2));

    if (response.data.code === 0 && response.data.data) {
      let usdtBalance = null;

      // –í–ê–†–ò–ê–ù–¢ 1: BingX –≤–µ—Ä–Ω—É–ª {  { balance: { asset: 'USDT', balance: '0.5384' } } }
      if (response.data.data.balance && response.data.data.balance.asset === 'USDT') {
        usdtBalance = parseFloat(response.data.data.balance.balance);
        console.log(`üí∞ [–ë–ê–õ–ê–ù–°] –ù–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å –≤ data.balance: $${usdtBalance.toFixed(2)}`);
      }
      // –í–ê–†–ò–ê–ù–¢ 2: BingX –≤–µ—Ä–Ω—É–ª {  { assets: [...] } }
      else if (response.data.data.assets && Array.isArray(response.data.data.assets)) {
        const usdtAsset = response.data.data.assets.find(asset => asset.asset === 'USDT');
        if (usdtAsset && usdtAsset.walletBalance) {
          usdtBalance = parseFloat(usdtAsset.walletBalance);
          console.log(`üí∞ [–ë–ê–õ–ê–ù–°] –ù–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å –≤ assets: $${usdtBalance.toFixed(2)}`);
        }
      }
      // –í–ê–†–ò–ê–ù–¢ 3: BingX –≤–µ—Ä–Ω—É–ª {  [...] } (–º–∞—Å—Å–∏–≤)
      else if (Array.isArray(response.data.data)) {
        const assetsArray = response.data.data;
        const usdtAsset = assetsArray.find(asset => asset.asset === 'USDT');
        if (usdtAsset && usdtAsset.walletBalance) {
          usdtBalance = parseFloat(usdtAsset.walletBalance);
          console.log(`üí∞ [–ë–ê–õ–ê–ù–°] –ù–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å –≤ –º–∞—Å—Å–∏–≤–µ data: $${usdtBalance.toFixed(2)}`);
        }
      }

      if (usdtBalance !== null) {
        return usdtBalance;
      } else {
        console.error('‚ùå [–ë–ê–õ–ê–ù–°] –ù–µ –Ω–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å USDT –≤ –æ—Ç–≤–µ—Ç–µ');
      }
    } else {
      console.error('‚ùå [–ë–ê–õ–ê–ù–°] –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç BingX:', response.data.msg || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
    return null;
  } catch (error) {
    console.error('‚ùå [–ë–ê–õ–ê–ù–°] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', error.message);
    return null;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
// ==========================
async function forceUpdateRealBalance() {
  console.log('üîÑ [–ë–ê–õ–ê–ù–°] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
  const balance = await getBingXRealBalance();
  if (balance !== null) {
    globalState.realBalance = balance;
    console.log(`‚úÖ [–ë–ê–õ–ê–ù–°] –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω: $${balance.toFixed(2)}`);
  }
  return balance;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è –¥–µ–º–æ)
// ==========================
function deposit(amount) {
  if (amount <= 0) return false;
  globalState.balance += amount;
  console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ $${amount}. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: $${globalState.balance.toFixed(2)}`);
  return true;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ (–î–ï–ú–û ‚Üî –†–ï–ê–õ–¨–ù–´–ô)
// ==========================
function toggleMode() {
  globalState.isRealMode = !globalState.isRealMode;
  console.log(`üîÑ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞: ${globalState.isRealMode ? '–†–ï–ê–õ–¨–ù–´–ô' : '–î–ï–ú–û'}`);
  
  if (globalState.isRealMode) {
    forceUpdateRealBalance();
  }
  
  return globalState.isRealMode;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (stable ‚Üî scalping)
// ==========================
function toggleTradeMode() {
  globalState.tradeMode = globalState.tradeMode === 'stable' ? 'scalping' : 'stable';
  
  // –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞, –Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  setRiskLevel(globalState.riskLevel);
  
  console.log(`‚ö° –¢–æ—Ä–≥–æ–≤—ã–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞: ${globalState.tradeMode}`);
  return globalState.tradeMode;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
// ==========================
function setRiskLevel(level) {
  globalState.riskLevel = level;
  
  // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
  if (globalState.tradeMode === 'scalping') {
    // –î–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ ‚Äî –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Å—Ç–æ–ø—ã –∏ —Ç–µ–π–∫–∏
    globalState.scalpingSettings = {
      takeProfitPercent: 0.01, // +1%
      stopLossPercent: 0.005   // -0.5%
    };
  } else {
    // –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ ‚Äî –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ
    globalState.scalpingSettings = {
      takeProfitPercent: 0.03, // +3%
      stopLossPercent: 0.02   // -2%
    };
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∏—Å–∫ –∏ –ø–ª–µ—á–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
  switch(level) {
    case 'recommended':
      globalState.maxRiskPerTrade = 0.01; // 1%
      globalState.maxLeverage = 3;
      console.log('üìâ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: 1%, –ø–ª–µ—á–æ 3x');
      break;
    case 'medium':
      globalState.maxRiskPerTrade = 0.02; // 2%
      globalState.maxLeverage = 5;
      console.log('‚öñÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –°–†–ï–î–ù–ò–ô —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: 2%, –ø–ª–µ—á–æ 5x');
      break;
    case 'high':
      globalState.maxRiskPerTrade = 0.05; // 5%
      globalState.maxLeverage = 10;
      console.log('üöÄ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –í–´–°–û–ö–ò–ô —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: 5%, –ø–ª–µ—á–æ 10x');
      break;
    case 'extreme':
      globalState.maxRiskPerTrade = 0.10; // 10%
      globalState.maxLeverage = 20;
      console.log('üí• –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: 10%, –ø–ª–µ—á–æ 20x (–û–ß–ï–ù–¨ –í–´–°–û–ö–ò–ô –†–ò–°–ö!)');
      break;
  }
  
  return globalState.riskLevel;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Å BingX
// ==========================
async function getCurrentFuturesPrices() {
  try {
    const response = await axios.get(`${BINGX_FUTURES_URL}/openApi/swap/v2/quote/price`, { timeout: 15000 });

    if (!response.data || !Array.isArray(response.data.data)) {
      console.error('‚ùå BingX –Ω–µ –≤–µ—Ä–Ω—É–ª –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤');
      return {};
    }

    const prices = {};
    for (const ticker of response.data.data) {
      if (!ticker.symbol || !ticker.price) continue;

      const coinSymbol = ticker.symbol.replace('USDT', '').toLowerCase();
      let coinName = '';
      const symbolMap = {
        'btc': 'bitcoin',
        'eth': 'ethereum',
        'bnb': 'binancecoin',
        'sol': 'solana',
        'xrp': 'ripple',
        'doge': 'dogecoin',
        'ada': 'cardano',
        'dot': 'polkadot',
        'link': 'chainlink',
        'avax': 'avalanche',
        'atom': 'cosmos',
        'uni': 'uniswap',
        'aave': 'aave',
        'fil': 'filecoin',
        'ltc': 'litecoin',
        'algo': 'algorand',
        'near': 'near',
        'apt': 'aptos',
        'pengu': 'pengu'
      };

      coinName = symbolMap[coinSymbol];
      if (!coinName) continue;

      prices[coinName] = parseFloat(ticker.price);
    }

    globalState.currentPrices = prices;
    return prices;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Å BingX:', error.message);
    return {};
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Å BingX
// ==========================
async function getBingXFuturesHistory(symbol, interval = '1h', limit = 50) {
  try {
    const symbolMap = {
      'bitcoin': 'BTC-USDT',
      'ethereum': 'ETH-USDT',
      'binancecoin': 'BNB-USDT',
      'solana': 'SOL-USDT',
      'ripple': 'XRP-USDT',
      'dogecoin': 'DOGE-USDT',
      'cardano': 'ADA-USDT',
      'polkadot': 'DOT-USDT',
      'chainlink': 'LINK-USDT',
      'avalanche': 'AVAX-USDT',
      'cosmos': 'ATOM-USDT',
      'uniswap': 'UNI-USDT',
      'aave': 'AAVE-USDT',
      'filecoin': 'FIL-USDT',
      'litecoin': 'LTC-USDT',
      'algorand': 'ALGO-USDT',
      'near': 'NEAR-USDT',
      'aptos': 'APT-USDT',
      'pengu': 'PENGU-USDT'
    };

    const bingxSymbol = symbolMap[symbol];
    if (!bingxSymbol) {
      console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–Ω–µ—Ç–∞: ${symbol}`);
      return [];
    }

    const response = await axios.get(`${BINGX_FUTURES_URL}/openApi/swap/v2/quote/klines`, {
      params: {
        symbol: bingxSymbol,
        interval: interval,
        limit: limit
      },
      timeout: 15000
    });

    if (!response.data || !Array.isArray(response.data.data)) {
      console.error(`‚ùå BingX –≤–µ—Ä–Ω—É–ª –Ω–µ –º–∞—Å—Å–∏–≤ –¥–ª—è ${symbol}:`, response.data);
      return [];
    }

    const candles = response.data.data.map(candle => ({
      price: parseFloat(candle.close),
      high: parseFloat(candle.high),
      low: parseFloat(candle.low),
      volume: parseFloat(candle.volume),
      time: candle.time
    }));

    return candles;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è ${symbol} —Å BingX:`, error.message);
    return [];
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –£–ù–ò–ö–ê–õ–¨–ù–´–ô –§–ò–õ–û–°–û–§–°–ö–ò–ô –ê–ù–ê–õ–ò–ó
// ==========================
function analyzeFuturesWithWisdom(candles, coinName, currentFearIndex) {
  if (candles.length < 10) return null;

  const prices = candles.map(c => c.price);
  const currentPrice = prices[prices.length - 1];
  const sma20 = prices.slice(-20).reduce((a, b) => a + b, 0) / 20;
  const atr = calculateATR(candles.slice(-14));
  const rsi = calculateRSI(prices.slice(-14));

  const isOverextendedUp = currentPrice > sma20 * 1.05;
  const isOverextendedDown = currentPrice < sma20 * 0.95;
  const volatility = atr / currentPrice;
  const isHighVolatility = volatility > 0.03;
  const isExtremeFear = currentFearIndex < 20;
  const isExtremeGreed = currentFearIndex > 80;

  let signal = {
    direction: null,
    confidence: 0.5,
    leverage: 1,
    reasoning: [],
    stopLoss: null,
    takeProfit: null
  };

  if (isExtremeFear && rsi < 30 && !isOverextendedDown) {
    signal.direction = 'LONG';
    signal.confidence += 0.3;
    signal.reasoning.push("‚òØÔ∏è –ò–Ω—å-–Ø–Ω: —Å—Ç—Ä–∞—Ö + –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å ‚Üí –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥ –≤ LONG");
  }

  if (isExtremeGreed && rsi > 70 && !isOverextendedUp) {
    signal.direction = 'SHORT';
    signal.confidence += 0.3;
    signal.reasoning.push("üî• –ü–µ—Ä–µ–≥—Ä–µ–≤: –∂–∞–¥–Ω–æ—Å—Ç—å + –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å ‚Üí –≤—Ö–æ–¥ –≤ SHORT");
  }

  if (isHighVolatility) {
    signal.confidence += 0.2;
    signal.reasoning.push("ü¶ã –≠—Ñ—Ñ–µ–∫—Ç –±–∞–±–æ—á–∫–∏: —Ä–µ–∑–∫–∏–π —Å–∫–∞—á–æ–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ ‚Üí —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞");
  }

  const consecutive = globalState.marketMemory.consecutiveTrades[coinName] || 0;
  if (consecutive >= 2) {
    signal.leverage = Math.max(1, globalState.maxLeverage * 0.5);
    signal.reasoning.push("üß± –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∏—Å–∫–∞: 2+ —Å–¥–µ–ª–∫–∏ ‚Üí —Å–Ω–∏–∂–∞–µ–º –ø–ª–µ—á–æ –¥–æ " + signal.leverage + "x");
  } else {
    signal.leverage = globalState.maxLeverage;
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  if (signal.direction === 'LONG') {
    signal.stopLoss = currentPrice * (1 - (globalState.scalpingSettings?.stopLossPercent || 0.02));
    signal.takeProfit = currentPrice * (1 + (globalState.scalpingSettings?.takeProfitPercent || 0.03));
  } else if (signal.direction === 'SHORT') {
    signal.stopLoss = currentPrice * (1 + (globalState.scalpingSettings?.stopLossPercent || 0.02));
    signal.takeProfit = currentPrice * (1 - (globalState.scalpingSettings?.takeProfitPercent || 0.03));
  }

  signal.reasoning.push("üåä –¶—É–Ω–∞–º–∏ –ø—Ä–∏–±—ã–ª–∏: 50% –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞ —Ü–µ–ª–∏, –æ—Å—Ç–∞—Ç–æ–∫ –≤ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø");

  return {
    coin: coinName,
    currentPrice,
    signal,
    rsi,
    volatility,
    sma20,
    fearIndex: currentFearIndex
  };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculateATR(candles) {
  let trSum = 0;
  for (let i = 1; i < candles.length; i++) {
    const tr = Math.max(
      candles[i].high - candles[i].low,
      Math.abs(candles[i].high - candles[i-1].price),
      Math.abs(candles[i].low - candles[i-1].price)
    );
    trSum += tr;
  }
  return trSum / candles.length;
}

function calculateRSI(prices) {
  if (prices.length < 2) return 50;
  let gains = 0, losses = 0, count = 0;
  for (let i = 1; i < prices.length; i++) {
    const diff = prices[i] - prices[i-1];
    if (diff > 0) gains += diff;
    else losses += Math.abs(diff);
    count++;
  }
  const avgGain = gains / count;
  const avgLoss = losses / count;
  const rs = avgLoss === 0 ? 100 : avgGain / avgLoss;
  return 100 - (100 / (1 + rs));
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
// ==========================
async function setBingXLeverage(symbol, leverage) {
  try {
    const timestamp = Date.now();
    const params = { symbol, leverage: leverage.toString(), timestamp };
    const signature = signBingXRequest(params);
    const url = `${BINGX_FUTURES_URL}/openApi/swap/v2/trade/leverage?${new URLSearchParams(params)}&signature=${signature}`;

    const response = await axios.post(url, {}, {
      headers: { 'X-BX-APIKEY': BINGX_API_KEY },
      timeout: 10000
    });

    if (response.data.code === 0) {
      console.log(`‚úÖ –ü–ª–µ—á–æ ${leverage}x —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${symbol}`);
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞ –¥–ª—è ${symbol}:`, response.data.msg);
    }
  } catch (error) {
    console.error(`üí• –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞:`, error.message);
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
// ==========================
async function placeBingXFuturesOrder(symbol, side, positionSide, type, quantity, price = null, leverage) {
  try {
    await setBingXLeverage(symbol, leverage);

    const timestamp = Date.now();
    const params = {
      symbol,
      side,
      positionSide,
      type,
      quantity: quantity.toFixed(6),
      timestamp
    };

    if (price && type === 'LIMIT') {
      params.price = price.toFixed(8);
    }

    const signature = signBingXRequest(params);
    const url = `${BINGX_FUTURES_URL}/openApi/swap/v2/trade/order?${new URLSearchParams(params)}&signature=${signature}`;

    const response = await axios.post(url, {}, {
      headers: { 'X-BX-APIKEY': BINGX_API_KEY },
      timeout: 10000
    });

    if (response.data.code === 0) {
      console.log(`‚úÖ –£–°–ü–ï–®–ù–´–ô –û–†–î–ï–†: ${side} ${quantity} ${symbol}`);
      return response.data.data;
    } else {
      console.error(`‚ùå –û–®–ò–ë–ö–ê –û–†–î–ï–†–ê:`, response.data.msg);
      return null;
    }
  } catch (error) {
    console.error(`üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞:`, error.message);
    return null;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
// ==========================
async function openFuturesTrade(coin, direction, leverage, size, price, stopLoss, takeProfit) {
  const symbolMap = {
    'bitcoin': 'BTC-USDT',
    'ethereum': 'ETH-USDT',
    'binancecoin': 'BNB-USDT',
    'solana': 'SOL-USDT',
    'ripple': 'XRP-USDT',
    'dogecoin': 'DOGE-USDT',
    'cardano': 'ADA-USDT',
    'polkadot': 'DOT-USDT',
    'chainlink': 'LINK-USDT',
    'avalanche': 'AVAX-USDT',
    'cosmos': 'ATOM-USDT',
    'uniswap': 'UNI-USDT',
    'aave': 'AAVE-USDT',
    'filecoin': 'FIL-USDT',
    'litecoin': 'LTC-USDT',
    'algorand': 'ALGO-USDT',
    'near': 'NEAR-USDT',
    'aptos': 'APT-USDT',
    'pengu': 'PENGU-USDT'
  };

  const symbol = symbolMap[coin];
  if (!symbol) {
    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è ${coin}`);
    return false;
  }

  const side = direction === 'LONG' ? 'BUY' : 'SELL';
  const positionSide = direction;

  console.log(`üåê –û—Ç–ø—Ä–∞–≤–∫–∞ ${direction} –æ—Ä–¥–µ—Ä–∞ –Ω–∞ BingX Futures: ${size} ${symbol} —Å –ø–ª–µ—á–æ–º ${leverage}x`);
  console.log(`üîÑ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${globalState.isRealMode ? '–†–ï–ê–õ–¨–ù–´–ô' : '–î–ï–ú–û'}`);
  console.log(`‚ö° –¢–æ—Ä–≥–æ–≤—ã–π —Ä–µ–∂–∏–º: ${globalState.tradeMode}`);
  console.log(`üí£ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: ${globalState.riskLevel}`);

  if (globalState.isRealMode) {
    const result = await placeBingXFuturesOrder(symbol, side, positionSide, 'MARKET', size, null, leverage);

    if (result) {
      const fee = size * price * globalState.takerFee; // –ö–æ–º–∏—Å—Å–∏—è —Ç–µ–π–∫–µ—Ä–∞
      const trade = {
        coin,
        type: direction,
        size,
        entryPrice: price,
        currentPrice: price,
        leverage,
        stopLoss,
        takeProfit,
        fee,
        timestamp: new Date().toLocaleString(),
        status: 'OPEN',
        orderId: result.orderId,
        progress: 0,
        probability: 50
      };

      globalState.history.push(trade);
      globalState.positions[coin] = {
        ...trade,
        trailingStop: price * (direction === 'LONG' ? 0.99 : 1.01)
      };

      globalState.stats.totalTrades++;
      globalState.marketMemory.consecutiveTrades[coin] = (globalState.marketMemory.consecutiveTrades[coin] || 0) + 1;
      globalState.stats.maxLeverageUsed = Math.max(globalState.stats.maxLeverageUsed, leverage);

      console.log(`‚úÖ –£–°–ü–ï–®–ù–û: ${direction} ${size} ${coin} –Ω–∞ BingX Futures`);
      return true;
    } else {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ BingX Futures`);
      return false;
    }
  } else {
    const cost = (size * price) / leverage;
    const fee = size * price * globalState.takerFee; // –ö–æ–º–∏—Å—Å–∏—è —Ç–µ–π–∫–µ—Ä–∞

    if (cost + fee > globalState.balance * globalState.maxRiskPerTrade) {
      console.log(`‚ùå –†–∏—Å–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${globalState.maxRiskPerTrade * 100}% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞`);
      return false;
    }

    globalState.balance -= fee;
    const trade = {
      coin,
      type: direction,
      size,
      entryPrice: price,
      currentPrice: price,
      leverage,
      stopLoss,
      takeProfit,
      fee,
      timestamp: new Date().toLocaleString(),
      status: 'OPEN',
      progress: 0,
      probability: 50
    };

    globalState.history.push(trade);
    globalState.positions[coin] = {
      ...trade,
      trailingStop: price * (direction === 'LONG' ? 0.99 : 1.01)
    };

    globalState.stats.totalTrades++;
    globalState.marketMemory.consecutiveTrades[coin] = (globalState.marketMemory.consecutiveTrades[coin] || 0) + 1;
    globalState.stats.maxLeverageUsed = Math.max(globalState.stats.maxLeverageUsed, leverage);

    console.log(`‚úÖ –î–ï–ú–û: ${direction} ${size} ${coin} —Å –ø–ª–µ—á–æ–º ${leverage}x`);
    return true;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
// ==========================
async function checkOpenPositions(currentPrices) {
  for (const coin of globalState.watchlist) {
    const position = globalState.positions[coin.name];
    if (!position) continue;

    const currentPrice = currentPrices[coin.name];
    if (!currentPrice) continue;

    let shouldClose = false;
    let reason = '';

    if (position.type === 'LONG' && currentPrice >= position.takeProfit) {
      shouldClose = true;
      reason = 'üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º 50% –ø—Ä–∏–±—ã–ª–∏';
    } else if (position.type === 'SHORT' && currentPrice <= position.takeProfit) {
      shouldClose = true;
      reason = 'üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º 50% –ø—Ä–∏–±—ã–ª–∏';
    }

    if (position.type === 'LONG' && currentPrice <= position.stopLoss) {
      shouldClose = true;
      reason = 'üõë –°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å';
    } else if (position.type === 'SHORT' && currentPrice >= position.stopLoss) {
      shouldClose = true;
      reason = 'üõë –°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å';
    }

    if (shouldClose) {
      console.log(`‚úÖ –ó–ê–ö–†–´–¢–ò–ï: ${reason} –ø–æ ${coin.name}`);
      const trade = globalState.history.find(t => t.coin === coin.name && t.status === 'OPEN');
      if (trade) {
        trade.exitPrice = currentPrice;
        trade.profitPercent = position.type === 'LONG' 
          ? (currentPrice - trade.entryPrice) / trade.entryPrice 
          : (trade.entryPrice - currentPrice) / trade.entryPrice;
        trade.status = 'CLOSED';
        
        if (trade.profitPercent > 0) {
          globalState.stats.profitableTrades++;
          if (globalState.isRealMode) {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ API
          } else {
            globalState.balance += (trade.size * trade.entryPrice * trade.profitPercent);
          }
        } else {
          globalState.stats.losingTrades++;
          if (globalState.isRealMode) {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ API
          } else {
            globalState.balance += (trade.size * trade.entryPrice * trade.profitPercent);
          }
        }
      }
      
      globalState.positions[coin.name] = null;
      globalState.marketMemory.consecutiveTrades[coin.name] = 0;
    } else {
      if (position.type === 'LONG' && currentPrice > position.entryPrice * 1.01) {
        position.trailingStop = Math.max(position.trailingStop, currentPrice * 0.99);
      } else if (position.type === 'SHORT' && currentPrice < position.entryPrice * 0.99) {
        position.trailingStop = Math.min(position.trailingStop, currentPrice * 1.01);
      }
    }
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
// ==========================
function showOpenPositionsProgress(currentPrices) {
  console.log(`\nüìä –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò ‚Äî –ü–†–û–ì–†–ï–°–°:`);
  let hasOpen = false;

  for (const coin of globalState.watchlist) {
    const position = globalState.positions[coin.name];
    if (!position) continue;

    const currentPrice = currentPrices[coin.name];
    if (!currentPrice) continue;

    let progress = 0;
    let targetPrice = position.takeProfit;
    let distanceToTarget = 0;

    if (position.type === 'LONG') {
      progress = (currentPrice - position.entryPrice) / (targetPrice - position.entryPrice) * 100;
      distanceToTarget = ((targetPrice - currentPrice) / currentPrice) * 100;
    } else {
      progress = (position.entryPrice - currentPrice) / (position.entryPrice - targetPrice) * 100;
      distanceToTarget = ((currentPrice - targetPrice) / currentPrice) * 100;
    }

    let successProbability = 50;
    if (progress > 0) successProbability = 50 + progress * 0.5;
    if (distanceToTarget < 0) successProbability += 20;
    successProbability = Math.min(95, Math.max(5, successProbability));

    console.log(`\nüìà ${coin.name} ${position.type}:`);
    console.log(`   –¢–µ–∫—É—â–∞—è: $${currentPrice.toFixed(2)} | –í—Ö–æ–¥: $${position.entryPrice.toFixed(2)}`);
    console.log(`   üéØ –¶–µ–ª—å: $${targetPrice.toFixed(2)} (${distanceToTarget > 0 ? '+' : ''}${distanceToTarget.toFixed(2)}% –¥–æ —Ü–µ–ª–∏)`);
    console.log(`   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${Math.min(100, Math.max(0, progress)).toFixed(1)}%`);
    console.log(`   üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: ${successProbability.toFixed(0)}%`);
    console.log(`   üõë –°—Ç–æ–ø: $${position.stopLoss.toFixed(2)} | –¢—Ä–µ–π–ª–∏–Ω–≥: $${position.trailingStop.toFixed(2)}`);
    console.log(`   ‚öñÔ∏è –ü–ª–µ—á–æ: ${position.leverage}x`);
    console.log(`   üí∏ –ö–æ–º–∏—Å—Å–∏—è: $${position.fee.toFixed(4)}`);

    hasOpen = true;
  }

  if (!hasOpen) console.log(`   –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π`);
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
// ==========================
function printStats() {
  const s = globalState.stats;
  console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–õ–ò:`);
  console.log(`   –°–¥–µ–ª–æ–∫ –≤—Å–µ–≥–æ: ${s.totalTrades} (–ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${s.profitableTrades}, —É–±—ã—Ç–æ—á–Ω—ã—Ö: ${s.losingTrades})`);
  console.log(`   Win Rate: ${s.winRate.toFixed(1)}%`);
  console.log(`   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: $${s.totalProfit.toFixed(2)} (${((s.totalProfit / 100) * 100).toFixed(1)}%)`);
  console.log(`   –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: ${s.maxDrawdown.toFixed(1)}%`);
  console.log(`   –ú–∞–∫—Å. –ø–ª–µ—á–æ: ${s.maxLeverageUsed}x`);
  console.log(`   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: $${globalState.balance.toFixed(2)}`);
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞ (—Å TradingView)
// ==========================
async function getCryptoNews() {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º TradingView API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
    const response = await axios.get('https://news-headlines.tradingview.com/v2/headlines?lang=en&category=cryptocurrencies', { timeout: 10000 });

    if (!response.data || !Array.isArray(response.data.items)) {
      throw new Error('Invalid response from TradingView');
    }

    const news = response.data.items.slice(0, 5).map(item => ({
      title: item.title,
      source: 'TradingView',
      sentiment: item.sentiment === 'positive' ? 'Positive' : item.sentiment === 'negative' ? 'Negative' : 'Neutral',
      url: item.url
    }));

    return news;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å TradingView:', error.message);
    // Fallback –Ω–∞ –¥–µ–º–æ-–Ω–æ–≤–æ—Å—Ç–∏
    return [
      { 
        title: "BitcoinÁ™ÅÁ†¥$60K, Êú∫ÊûÑËµÑÈáëÊåÅÁª≠ÊµÅÂÖ•", 
        source: "CryptoNews", 
        sentiment: "Positive",
        url: "#"
      },
      { 
        title: "Ethereum ETF Approval Expected in Q3 2024", 
        source: "CoinDesk", 
        sentiment: "Positive",
        url: "#"
      },
      { 
        title: "Market Correction: Altcoins Down 15% This Week", 
        source: "Cointelegraph", 
        sentiment: "Negative",
        url: "#"
      },
      { 
        title: "Solana Network Upgrades Boost Transaction Speed", 
        source: "The Block", 
        sentiment: "Positive",
        url: "#"
      },
      { 
        title: "Regulatory Pressure Increases on Major Exchanges", 
        source: "Bloomberg Crypto", 
        sentiment: "Negative",
        url: "#"
      }
    ];
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–∫–∞ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
// ==========================
async function sendPushNotification(title, body, url = '/') {
  try {
    const response = await fetch('http://localhost:3000/api/notify', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ title, body, url })
    });

    if (response.ok) {
      console.log(`üîî Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${title}`);
    } else {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
  }
}

// ==========================
// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ‚Äî –¶–ò–ö–õ –ë–û–¢–ê
// ==========================
(async () => {
  console.log('ü§ñ –ó–ê–ü–£–°–ö –ë–û–¢–ê v16.0 ‚Äî –¢–†–ï–ô–î–ò–ù–ì –ë–û–¢ –í–ê–°–Ø 3000 –£–ù–ò–ö–ê–õ–¨–ù–´–ô');
  console.log('üìå deposit(—Å—É–º–º–∞) ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç—å –¥–µ–º–æ-–±–∞–ª–∞–Ω—Å');
  console.log('üîÑ toggleMode() ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º (–î–ï–ú–û ‚Üî –†–ï–ê–õ–¨–ù–´–ô)');
  console.log('‚ö° toggleTradeMode() ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Ä–µ–∂–∏–º (stable ‚Üî scalping)');
  console.log('üí£ setRiskLevel() ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (recommended, medium, high, extreme)');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
  setRiskLevel('recommended');

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  await forceUpdateRealBalance();

  while (globalState.isRunning) {
    try {
      console.log(`\n[${new Date().toLocaleTimeString()}] === –ê–ù–ê–õ–ò–ó –û–¢ –í–ê–°–ò 3000 ===`);

      const fearIndex = await getFearAndGreedIndex();
      console.log(`üò± –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: ${fearIndex}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      if (Date.now() % 300000 < 10000) {
        await forceUpdateRealBalance();
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
      const currentPrices = await getCurrentFuturesPrices();
      globalState.currentPrices = currentPrices;
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
      if (Date.now() % 1800000 < 60000) {
        globalState.marketMemory.news = await getCryptoNews();
        console.log('üì∞ –ü–æ–ª—É—á–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞');
      }

      await checkOpenPositions(currentPrices);

      showOpenPositionsProgress(currentPrices);

      let bestOpportunity = null;
      let bestReasoning = [];

      for (const coin of globalState.watchlist) {
        console.log(`\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ—å—é—á–µ—Ä—Å ${coin.name}...`);

        const candles = await getBingXFuturesHistory(coin.name, '1h', 50);
        if (candles.length < 10) {
          console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${coin.name} ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö`);
          await new Promise(r => setTimeout(r, 1200));
          continue;
        }

        const analysis = analyzeFuturesWithWisdom(candles, coin.name, fearIndex);
        if (!analysis || !analysis.signal.direction) {
          await new Promise(r => setTimeout(r, 1200));
          continue;
        }

        console.log(`   ‚úÖ –°–∏–≥–Ω–∞–ª –¥–ª—è ${coin.name}: ${analysis.signal.direction}`);
        analysis.signal.reasoning.forEach(r => console.log(`   ‚Ä¢ ${r}`));

        if (!bestOpportunity) {
          bestOpportunity = analysis;
          bestReasoning = analysis.signal.reasoning;
        }

        await new Promise(r => setTimeout(r, 1200));
      }

      if (bestOpportunity && (globalState.isRealMode || globalState.balance > 10)) {
        console.log(`\nüíé –í–ê–°–Ø 3000 –†–ï–ö–û–ú–ï–ù–î–£–ï–¢: ${bestOpportunity.signal.direction} –ø–æ ${bestOpportunity.coin}`);
        bestReasoning.forEach(r => console.log(`   ‚Ä¢ ${r}`));

        const currentBalance = globalState.isRealMode ? (globalState.realBalance || 100) : globalState.balance;
        const riskAmount = currentBalance * globalState.maxRiskPerTrade;
        const price = bestOpportunity.currentPrice;
        const stopDistance = bestOpportunity.signal.direction === 'LONG' 
          ? price - bestOpportunity.signal.stopLoss 
          : bestOpportunity.signal.stopLoss - price;
        
        const size = riskAmount / stopDistance;
        const finalSize = Math.max(0.001, size);

        console.log(`\nüü¢ –í–•–û–î: ${bestOpportunity.signal.direction} ${finalSize.toFixed(6)} ${bestOpportunity.coin} —Å –ø–ª–µ—á–æ–º ${bestOpportunity.signal.leverage}x`);
        await openFuturesTrade(
          bestOpportunity.coin,
          bestOpportunity.signal.direction,
          bestOpportunity.signal.leverage,
          finalSize,
          bestOpportunity.currentPrice,
          bestOpportunity.signal.stopLoss,
          bestOpportunity.signal.takeProfit
        );
      } else {
        console.log(`\n‚ö™ –í–∞—Å—è 3000 –Ω–µ –≤–∏–¥–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ‚Äî –æ—Ç–¥—ã—Ö–∞–µ–º...`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞)
      if (!globalState.isRealMode) {
        globalState.stats.totalProfit = globalState.balance - 100;
        if (globalState.balance > globalState.stats.peakBalance) {
          globalState.stats.peakBalance = globalState.balance;
        }
        globalState.stats.maxDrawdown = ((globalState.stats.peakBalance - globalState.balance) / globalState.stats.peakBalance) * 100;
      }

      globalState.stats.winRate = globalState.stats.totalTrades > 0
        ? (globalState.stats.profitableTrades / globalState.stats.totalTrades) * 100
        : 0;

      if (Date.now() % 60000 < 10000) {
        console.log(`\nüí∞ ${globalState.isRealMode ? '–†–µ–∞–ª—å–Ω—ã–π' : '–î–µ–º–æ'}-–±–∞–ª–∞–Ω—Å: $${(globalState.isRealMode ? globalState.realBalance : globalState.balance)?.toFixed(2) || '–ó–∞–≥—Ä—É–∑–∫–∞...'}`);
      }

      if (globalState.stats.totalTrades > 0 && globalState.history.length % 2 === 0) {
        printStats();
      }

    } catch (error) {
      console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¶–ò–ö–õ–ï:', error.message);
    }

    console.log(`\nüí§ –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...`);
    await new Promise(r => setTimeout(r, 60000));
  }
})();

// ‚úÖ –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô
module.exports = {
  globalState,
  deposit,
  toggleMode,
  toggleTradeMode,
  setRiskLevel,
  forceUpdateRealBalance,
  balance: () => globalState.balance,
  stats: () => globalState.stats,
  history: () => globalState.history
};

global.deposit = deposit;
global.toggleMode = toggleMode;
global.toggleTradeMode = toggleTradeMode;
global.setRiskLevel = setRiskLevel;
global.forceUpdateRealBalance = forceUpdateRealBalance;
global.balance = () => globalState.balance;
global.stats = () => globalState.stats;
global.history = () => globalState.history;

console.log('\n‚úÖ –¢—Ä–µ–π–¥–∏–Ω–≥ –ë–æ—Ç –í–∞—Å—è 3000 –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—â–µ–Ω!');
console.log('–ò—Å–ø–æ–ª—å–∑—É–π toggleMode() –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –î–ï–ú–û –∏ –†–ï–ê–õ–¨–ù–´–ú —Ä–µ–∂–∏–º–æ–º.');
console.log('–ò—Å–ø–æ–ª—å–∑—É–π toggleTradeMode() –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Ä–µ–∂–∏–º–∞–º–∏.');
console.log('–ò—Å–ø–æ–ª—å–∑—É–π setRiskLevel(level) –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞: recommended, medium, high, extreme.');
