const express = require('express');
const cors = require('cors');
const path = require('path');
const axios = require('axios');
const CryptoJS = require('crypto-js');
const moment = require('moment');

// ==========================
// –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
// ==========================
let globalState = {
  balance: 100, // –î–µ–º–æ-–±–∞–ª–∞–Ω—Å
  realBalance: null, // –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å BingX Futures
  positions: {}, // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
  history: [], // –ò—Å—Ç–æ—Ä–∏—è –í–°–ï–• —Å–¥–µ–ª–æ–∫
  stats: {
    totalTrades: 0,
    profitableTrades: 0,
    losingTrades: 0,
    winRate: 0,
    totalProfit: 0,
    maxDrawdown: 0,
    peakBalance: 100,
    maxLeverageUsed: 1,
    volatilityIndex: 0,
    marketSentiment: 50
  },
  marketMemory: {
    lastTrades: {},
    consecutiveTrades: {},
    volatilityHistory: {},
    fearSentimentHistory: [],
    marketNews: [],
    fundamentalData: {} // –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–µ—Ç
  },
  isRunning: true,
  takerFee: 0.0005, // –ö–æ–º–∏—Å—Å–∏—è —Ç–µ–π–∫–µ—Ä–∞ (0.05%)
  makerFee: 0.0002, // –ö–æ–º–∏—Å—Å–∏—è –º–µ–π–∫–µ—Ä–∞ (0.02%)
  maxRiskPerTrade: 0.01,  // 1% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  maxLeverage: 3,         // 3x –ø–ª–µ—á–æ
  watchlist: [
    { symbol: 'BTC-USD', name: 'bitcoin' },
    { symbol: 'ETH-USD', name: 'ethereum' },
    { symbol: 'SOL-USD', name: 'solana' },
    { symbol: 'XRP-USD', name: 'ripple' }
  ],
  isRealMode: false, // false = –¥–µ–º–æ, true = —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
  tradeMode: 'adaptive', // 'adaptive' (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º), 'scalping', 'swing'
  riskLevel: 'recommended', // 'recommended', 'medium', 'high', 'extreme'
  testMode: false,
  currentPrices: {},
  fearIndex: 50,
  bingxCache: {}, // –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö BingX API
  fundamentalCache: {} // –ö—ç—à –¥–ª—è CoinGecko
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
globalState.watchlist.forEach(coin => {
  globalState.positions[coin.name] = null;
  globalState.marketMemory.lastTrades[coin.name] = [];
  globalState.marketMemory.consecutiveTrades[coin.name] = 0;
  globalState.marketMemory.volatilityHistory[coin.name] = [];
  globalState.marketMemory.fundamentalData[coin.name] = {
    developerActivity: null,
    socialSentiment: null
  };
});

// ==========================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø BINGX API
// ==========================
const BINGX_API_KEY = process.env.BINGX_API_KEY;
const BINGX_SECRET_KEY = process.env.BINGX_SECRET_KEY;
const BINGX_FUTURES_URL = process.env.BINGX_API_DOMAIN || 'https://open-api.bingx.com';
const APP_PASSWORD = process.env.APP_PASSWORD || 'admin123'; // –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è BingX (–°–¢–†–û–ì–û –ü–û –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò)
// ==========================
function signBingXRequest(params) {
  const cleanParams = { ...params };
  delete cleanParams.signature;
  delete cleanParams.recvWindow;
  
  const sortedKeys = Object.keys(cleanParams).sort();
  const sortedParams = sortedKeys.map(key => `${key}=${cleanParams[key]}`).join('&');
  return CryptoJS.HmacSHA256(sortedParams, BINGX_SECRET_KEY).toString(CryptoJS.enc.Hex);
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ Fear & Greed Index
// ==========================
async function getFearAndGreedIndex() {
  try {
    const response = await axios.get('https://api.alternative.me/fng/?limit=1', { timeout: 10000 });
    const value = parseInt(response.data.data[0].value);
    globalState.marketMemory.fearSentimentHistory.push({ value, timestamp: Date.now() });
    if (globalState.marketMemory.fearSentimentHistory.length > 24) {
      globalState.marketMemory.fearSentimentHistory.shift();
    }
    globalState.fearIndex = value;
    globalState.stats.marketSentiment = value;
    return value;
  } catch (e) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º 50');
    globalState.fearIndex = Math.floor(20 + Math.random() * 60);
    globalState.stats.marketSentiment = globalState.fearIndex;
    return globalState.fearIndex;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ BingX —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
// ==========================
async function getBingXData(url, params) {
  const cacheKey = `${url}-${JSON.stringify(params)}`;
  
  if (globalState.bingxCache[cacheKey] && Date.now() - globalState.bingxCache[cacheKey].timestamp < 30000) {
    return globalState.bingxCache[cacheKey].data;
  }
  
  try {
    const response = await axios.get(url, {
      params,
      headers: { 
        'X-BX-APIKEY': BINGX_API_KEY,
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      },
      timeout: 10000
    });
    
    globalState.bingxCache[cacheKey] = {
      data: response.data,
      timestamp: Date.now()
    };
    
    return response.data;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ BingX:`, error.message);
    return null;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å BingX Futures
// ==========================
async function getBingXRealBalance() {
  try {
    console.log('üîç [–ë–ê–õ–ê–ù–°] –ù–∞—á–∏–Ω–∞—é –∑–∞–ø—Ä–æ—Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
    if (!BINGX_API_KEY || !BINGX_SECRET_KEY) {
      console.error('‚ùå [–ë–ê–õ–ê–ù–°] API-–∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return null;
    }
    
    const timestamp = Date.now();
    const params = { timestamp, recvWindow: 5000 };
    const signature = signBingXRequest(params);
    const url = `${BINGX_FUTURES_URL}/openApi/cswap/v1/user/balance?timestamp=${timestamp}&recvWindow=5000&signature=${signature}`;
    
    console.log('üåê [–ë–ê–õ–ê–ù–°] –û—Ç–ø—Ä–∞–≤–ª—è—é –ü–û–î–ü–ò–°–ê–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å –∫:', url);
    
    const response = await getBingXData(url, params);
    if (!response) return null;
    
    console.log('‚úÖ [–ë–ê–õ–ê–ù–°] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç BingX:', JSON.stringify(response, null, 2));
    
    if (response.code === 0 && response.data) {
      let usdtBalance = null;
      if (response.data.balance && response.data.balance.asset === 'USDT') {
        usdtBalance = parseFloat(response.data.balance.balance);
        console.log(`üí∞ [–ë–ê–õ–ê–ù–°] –ù–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å –≤ data.balance: $${usdtBalance.toFixed(2)}`);
      } else if (response.data.assets && Array.isArray(response.data.assets)) {
        const usdtAsset = response.data.assets.find(asset => asset.asset === 'USDT');
        if (usdtAsset && usdtAsset.walletBalance) {
          usdtBalance = parseFloat(usdtAsset.walletBalance);
          console.log(`üí∞ [–ë–ê–õ–ê–ù–°] –ù–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å –≤ assets: $${usdtBalance.toFixed(2)}`);
        }
      } else if (Array.isArray(response.data)) {
        const usdtAsset = response.data.find(asset => asset.asset === 'USDT');
        if (usdtAsset && usdtAsset.walletBalance) {
          usdtBalance = parseFloat(usdtAsset.walletBalance);
          console.log(`üí∞ [–ë–ê–õ–ê–ù–°] –ù–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å –≤ –º–∞—Å—Å–∏–≤–µ: $${usdtBalance.toFixed(2)}`);
        }
      }
      
      if (usdtBalance !== null) return usdtBalance;
      else console.error('‚ùå [–ë–ê–õ–ê–ù–°] –ù–µ –Ω–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å USDT –≤ –æ—Ç–≤–µ—Ç–µ');
    } else {
      console.error('‚ùå [–ë–ê–õ–ê–ù–°] –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç BingX:', response.msg || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
    
    return null;
  } catch (error) {
    console.error('‚ùå [–ë–ê–õ–ê–ù–°] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', error.message);
    return null;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π —Å BingX Futures
// ==========================
async function getBingXFuturesHistory(symbol, interval = '1h', limit = 100) {
  try {
    const timestamp = Date.now();
    const params = {
      symbol: symbol,
      interval,
      limit,
      timestamp,
      recvWindow: 5000
    };
    
    const signature = signBingXRequest(params);
    const url = `${BINGX_FUTURES_URL}/openApi/cswap/v1/market/klines?symbol=${params.symbol}&interval=${params.interval}&limit=${params.limit}&timestamp=${params.timestamp}&recvWindow=5000&signature=${signature}`;
    
    console.log(`üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è ${symbol}: GET ${url}`);
    
    const response = await getBingXData(url, params);
    if (!response) return [];
    
    console.log('‚úÖ [–ò–°–¢–û–†–ò–Ø] –û—Ç–≤–µ—Ç:', JSON.stringify(response, null, 2));
    
    if (response.code === 0 && Array.isArray(response.data)) {
      const candles = response.data.map(candle => ({
        time: candle[0],
        open: parseFloat(candle[1]),
        high: parseFloat(candle[2]),
        low: parseFloat(candle[3]),
        close: parseFloat(candle[4]),
        volume: parseFloat(candle[5]),
        closeTime: candle[6],
        quoteVolume: parseFloat(candle[7]),
        trades: parseInt(candle[8]),
        takerBuyBaseVolume: parseFloat(candle[9]),
        takerBuyQuoteVolume: parseFloat(candle[10])
      }));
      return candles;
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç BingX –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ ${symbol}:`, response.msg || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return [];
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è ${symbol}:`, error.message);
    return [];
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω —Å BingX
// ==========================
async function getCurrentPrices() {
  try {
    const prices = {};
    
    for (const coin of globalState.watchlist) {
      const timestamp = Date.now();
      const params = {
        symbol: coin.symbol,
        timestamp,
        recvWindow: 5000
      };
      
      const signature = signBingXRequest(params);
      const url = `${BINGX_FUTURES_URL}/openApi/cswap/v1/market/ticker?symbol=${params.symbol}&timestamp=${params.timestamp}&recvWindow=5000&signature=${signature}`;
      
      console.log(`üåê –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è ${coin.symbol}: GET ${url}`);
      
      try {
        const response = await getBingXData(url, params);
        if (!response) continue;
        
        if (response.code === 0 && response.data && response.data.price) {
          const price = parseFloat(response.data.price);
          const cleanSymbol = coin.symbol.replace('-USD', '').toLowerCase();
          prices[cleanSymbol] = price;
          console.log(`‚úÖ –¶–µ–Ω–∞ –¥–ª—è ${coin.symbol}: $${price}`);
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${coin.symbol}:`, response.msg || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ');
        }
      } catch (error) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è ${coin.symbol}:`, error.message);
      }
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ BingX
      await new Promise(r => setTimeout(r, 2000));
    }
    
    globalState.currentPrices = prices;
    return prices;
  } catch (error) {
    console.error('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω:', error.message);
    return {};
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
// ==========================
async function setBingXLeverage(symbol, leverage) {
  try {
    if (!BINGX_API_KEY || !BINGX_SECRET_KEY) {
      console.log(`‚ÑπÔ∏è [–ü–õ–ï–ß–û] API-–∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã. –ü–ª–µ—á–æ ${leverage}x –¥–ª—è ${symbol} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ.`);
      return true;
    }
    
    const timestamp = Date.now();
    const params = {
      symbol: symbol,
      side: 'LONG',
      leverage: leverage.toString(),
      timestamp,
      recvWindow: 5000
    };
    
    const signature = signBingXRequest(params);
    const url = `${BINGX_FUTURES_URL}/openApi/cswap/v1/trade/leverage?symbol=${params.symbol}&side=LONG&leverage=${params.leverage}&timestamp=${params.timestamp}&recvWindow=5000&signature=${signature}`;
    
    console.log(`üåê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ –¥–ª—è ${symbol}: POST ${url}`);
    
    const response = await axios.post(url, null, {
      headers: { 
        'X-BX-APIKEY': BINGX_API_KEY,
        'Content-Type': 'application/json',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      },
      timeout: 10000
    });
    
    if (response.data.code === 0) {
      console.log(`‚úÖ –ü–ª–µ—á–æ ${leverage}x —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${symbol}`);
      return true;
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞ –¥–ª—è ${symbol}:`, response.data.msg);
      return false;
    }
  } catch (error) {
    console.error(`üí• –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞:`, error.message);
    return false;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
// ==========================
async function placeBingXFuturesOrder(symbol, side, type, quantity, price = null, leverage, positionSide) {
  try {
    if (!BINGX_API_KEY || !BINGX_SECRET_KEY) {
      console.log(`‚ÑπÔ∏è [–û–†–î–ï–†] API-–∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã. –û—Ä–¥–µ—Ä ${side} ${quantity} ${symbol} —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω.`);
      return { orderId: `fake_${Date.now()}_${Math.random().toString(36).substr(2, 9)}` };
    }
    
    const leverageSet = await setBingXLeverage(symbol, leverage);
    if (!leverageSet) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ ${leverage}x –¥–ª—è ${symbol}`);
      return null;
    }
    
    const timestamp = Date.now();
    const params = {
      symbol: symbol,
      side: side,
      type: type,
      quantity: quantity.toFixed(6),
      timestamp: timestamp,
      positionSide: positionSide,
      recvWindow: 5000
    };
    
    if (price && type === 'LIMIT') {
      params.price = price.toFixed(8);
    }
    
    const signature = signBingXRequest(params);
    const url = `${BINGX_FUTURES_URL}/openApi/cswap/v1/trade/order?symbol=${params.symbol}&side=${params.side}&type=${params.type}&quantity=${params.quantity}&timestamp=${params.timestamp}&positionSide=${params.positionSide}&recvWindow=5000&signature=${signature}`;
    
    if (price && type === 'LIMIT') {
      url += `&price=${price.toFixed(8)}`;
    }
    
    console.log(`üåê –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: POST ${url}`);
    
    const response = await axios.post(url, null, {
      headers: { 
        'X-BX-APIKEY': BINGX_API_KEY,
        'Content-Type': 'application/json',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      },
      timeout: 10000
    });
    
    if (response.data.code === 0) {
      console.log(`‚úÖ –£–°–ü–ï–®–ù–´–ô –û–†–î–ï–†: ${side} ${quantity} ${symbol} (–ø–æ–∑–∏—Ü–∏—è: ${positionSide})`);
      return response.data.data;
    } else {
      console.error(`‚ùå –û–®–ò–ë–ö–ê –û–†–î–ï–†–ê:`, response.data.msg);
      return null;
    }
  } catch (error) {
    console.error(`üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞:`, error.message);
    return null;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
// ==========================
async function openFuturesTrade(coin, direction, leverage, size, price, stopLoss, takeProfit) {
  const symbol = coin.symbol;
  const positionSide = direction === 'LONG' ? 'LONG' : 'SHORT';
  const side = direction === 'LONG' ? 'BUY' : 'SELL';
  
  console.log(`üåê –û—Ç–ø—Ä–∞–≤–∫–∞ ${direction} –æ—Ä–¥–µ—Ä–∞ –Ω–∞ BingX Futures: ${size} ${symbol} —Å –ø–ª–µ—á–æ–º ${leverage}x`);
  console.log(`üîÑ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${globalState.isRealMode ? '–†–ï–ê–õ–¨–ù–´–ô': '–î–ï–ú–û'}`);
  console.log(`‚ö° –¢–æ—Ä–≥–æ–≤—ã–π —Ä–µ–∂–∏–º: ${globalState.tradeMode}`);
  console.log(`üí£ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: ${globalState.riskLevel}`);
  
  if (globalState.isRealMode) {
    const result = await placeBingXFuturesOrder(symbol, side, 'MARKET', size, null, leverage, positionSide);
    if (result) {
      const fee = size * price * globalState.takerFee;
      const trade = {
        coin: coin.name,
        type: direction,
        size,
        entryPrice: price,
        currentPrice: price,
        leverage,
        stopLoss,
        takeProfit,
        fee,
        timestamp: new Date().toLocaleString(),
        status: 'OPEN',
        orderId: result.orderId,
        progress: 0,
        probability: 50,
        riskScore: calculateRiskScore(coin.name)
      };
      globalState.history.push(trade);
      globalState.positions[coin.name] = trade;
      globalState.stats.totalTrades++;
      globalState.marketMemory.consecutiveTrades[coin.name] = (globalState.marketMemory.consecutiveTrades[coin.name] || 0) + 1;
      globalState.stats.maxLeverageUsed = Math.max(globalState.stats.maxLeverageUsed, leverage);
      console.log(`‚úÖ –£–°–ü–ï–®–ù–û: ${direction} ${size} ${coin.name} –Ω–∞ BingX Futures`);
      return true;
    } else {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ BingX Futures`);
      return false;
    }
  } else {
    const cost = (size * price) / leverage;
    const fee = size * price * globalState.takerFee;
    if (cost + fee > globalState.balance * globalState.maxRiskPerTrade) {
      console.log(`‚ùå –†–∏—Å–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${globalState.maxRiskPerTrade * 100}% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞`);
      return false;
    }
    globalState.balance -= fee;
    const trade = {
      coin: coin.name,
      type: direction,
      size,
      entryPrice: price,
      currentPrice: price,
      leverage,
      stopLoss,
      takeProfit,
      fee,
      timestamp: new Date().toLocaleString(),
      status: 'OPEN',
      progress: 0,
      probability: 50,
      riskScore: calculateRiskScore(coin.name)
    };
    globalState.history.push(trade);
    globalState.positions[coin.name] = trade;
    globalState.stats.totalTrades++;
    globalState.marketMemory.consecutiveTrades[coin.name] = (globalState.marketMemory.consecutiveTrades[coin.name] || 0) + 1;
    globalState.stats.maxLeverageUsed = Math.max(globalState.stats.maxLeverageUsed, leverage);
    console.log(`‚úÖ –î–ï–ú–û: ${direction} ${size} ${coin.name} —Å –ø–ª–µ—á–æ–º ${leverage}x`);
    return true;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –º–æ–Ω–µ—Ç—ã
// ==========================
function calculateRiskScore(coin) {
  const fundamentalData = globalState.marketMemory.fundamentalData[coin];
  const volatility = globalState.marketMemory.volatilityHistory[coin][globalState.marketMemory.volatilityHistory[coin].length - 1] || 0.02;
  let riskScore = 50;
  if (volatility > 0.05) riskScore += 20;
  if (volatility < 0.02) riskScore -= 10;
  if (fundamentalData && fundamentalData.developerActivity) {
    if (fundamentalData.developerActivity > 100) riskScore -= 15;
    else if (fundamentalData.developerActivity < 20) riskScore += 25;
  }
  if (globalState.fearIndex < 30) riskScore -= 15;
  else if (globalState.fearIndex > 70) riskScore += 15;
  return Math.max(0, Math.min(100, riskScore));
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –£–ù–ò–ö–ê–õ–¨–ù–´–ô –ê–î–ê–ü–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó
// ==========================
function analyzeMarketWithAdaptiveStrategy(candles, coinName, currentFearIndex, fundamentalData) {
  if (candles.length < 50) return null;
  const prices = candles.map(c => c.close);
  const currentPrice = prices[prices.length - 1];
  const sma20 = calculateSMA(prices, 20);
  const sma50 = calculateSMA(prices, 50);
  const sma200 = calculateSMA(prices, 200);
  const atr = calculateATR(candles.slice(-14));
  const rsi = calculateRSI(prices.slice(-14));
  const bollingerUpper = calculateBollingerBands(prices, 20, 2).upper;
  const bollingerLower = calculateBollingerBands(prices, 20, 2).lower;
  const macd = calculateMACD(prices);
  const ichimoku = calculateIchimokuCloud(candles);
  const volatility = atr / currentPrice;
  const isHighVolatility = volatility > 0.05;
  const isLowVolatility = volatility < 0.02;
  const isUptrend = sma20 > sma50 && sma50 > sma200;
  const isDowntrend = sma20 < sma50 && sma50 < sma200;
  const isSideways = Math.abs(sma20 - sma50) / sma20 < 0.01;
  const isOverbought = rsi > 70;
  const isOversold = rsi < 30;
  const isMACDBullish = macd.macd > macd.signal;
  const isMACDBearish = macd.macd < macd.signal;
  const isIchimokuBullish = currentPrice > ichimoku.senkouSpanA && currentPrice > ichimoku.senkouSpanB;
  const isIchimokuBearish = currentPrice < ichimoku.senkouSpanA && currentPrice < ichimoku.senkouSpanB;
  const isBollingerUpperBreak = currentPrice > bollingerUpper;
  const isBollingerLowerBreak = currentPrice < bollingerLower;
  const isBollingerSqueeze = (bollingerUpper - bollingerLower) / sma20 < 0.01;
  const fundamentalScore = fundamentalData ? calculateFundamentalScore(fundamentalData) : 50;
  const marketSentiment = calculateMarketSentiment(currentFearIndex, fundamentalScore);
  let signal = {
    direction: null,
    confidence: 0.5,
    leverage: 1,
    reasoning: [],
    stopLoss: null,
    takeProfit: null,
    riskScore: 50
  };
  if (isUptrend && isMACDBullish && isIchimokuBullish && !isOverbought) {
    signal.direction = 'LONG';
    signal.confidence += 0.3;
    signal.reasoning.push("üìà –¢—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö + MACD –±—ã—á–∏–π + Ichimoku –±—ã—á–∏–π");
  }
  if (isDowntrend && isMACDBearish && isIchimokuBearish && !isOversold) {
    signal.direction = 'SHORT';
    signal.confidence += 0.3;
    signal.reasoning.push("üìâ –¢—Ä–µ–Ω–¥ –≤–Ω–∏–∑ + MACD –º–µ–¥–≤–µ–∂–∏–π + Ichimoku –º–µ–¥–≤–µ–∂–∏–π");
  }
  if (isBollingerSqueeze && isUptrend) {
    signal.direction = 'LONG';
    signal.confidence += 0.2;
    signal.reasoning.push("üìä –°–∂–∞—Ç–∏–µ Bollinger Bands + –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ ‚Üí –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–æ—Ä—ã–≤");
  }
  if (isBollingerSqueeze && isDowntrend) {
    signal.direction = 'SHORT';
    signal.confidence += 0.2;
    signal.reasoning.push("üìä –°–∂–∞—Ç–∏–µ Bollinger Bands + –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ ‚Üí –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–æ—Ä—ã–≤");
  }
  if (isBollingerUpperBreak && isUptrend) {
    signal.direction = 'LONG';
    signal.confidence += 0.2;
    signal.reasoning.push("üéØ –ü—Ä–æ—Ä—ã–≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã Bollinger + –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥");
  }
  if (isBollingerLowerBreak && isDowntrend) {
    signal.direction = 'SHORT';
    signal.confidence += 0.2;
    signal.reasoning.push("üéØ –ü—Ä–æ—Ä—ã–≤ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã Bollinger + –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥");
  }
  if (currentFearIndex < 25 && signal.direction === 'LONG') {
    signal.confidence += 0.15;
    signal.reasoning.push("üò± –°–∏–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö + –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å ‚Üí –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è LONG");
  }
  if (currentFearIndex > 75 && signal.direction === 'SHORT') {
    signal.confidence += 0.15;
    signal.reasoning.push("ü§ë –°–∏–ª—å–Ω–∞—è –∂–∞–¥–Ω–æ—Å—Ç—å + –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å ‚Üí –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è SHORT");
  }
  if (fundamentalScore > 70 && signal.direction === 'LONG') {
    signal.confidence += 0.1;
    signal.reasoning.push("üìä –í—ã—Å–æ–∫–∞—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ ‚Üí –ø–æ–¥–¥–µ—Ä–∂–∫–∞ LONG");
  }
  if (fundamentalScore < 30 && signal.direction === 'SHORT') {
    signal.confidence += 0.1;
    signal.reasoning.push("üìä –ù–∏–∑–∫–∞—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ ‚Üí –ø–æ–¥–¥–µ—Ä–∂–∫–∞ SHORT");
  }
  signal.riskScore = calculateRiskScore(coinName);
  const atrMultiplier = isHighVolatility ? 2.5 : 1.5;
  const volatilityFactor = isLowVolatility ? 0.8 : 1.2;
  if (signal.direction === 'LONG') {
    signal.stopLoss = currentPrice * (1 - (volatility * volatilityFactor * 3));
    signal.takeProfit = currentPrice * (1 + (volatility * volatilityFactor * 6));
    if (isHighVolatility) {
      signal.leverage = Math.min(3, globalState.maxLeverage * 0.5);
      signal.reasoning.push("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ‚Üí —Å–Ω–∏–∂–∞–µ–º –ø–ª–µ—á–æ");
    } else if (isLowVolatility) {
      signal.leverage = Math.min(10, globalState.maxLeverage * 1.5);
      signal.reasoning.push("üìâ –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ‚Üí —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–ª–µ—á–æ");
    } else {
      signal.leverage = globalState.maxLeverage;
    }
  } else if (signal.direction === 'SHORT') {
    signal.stopLoss = currentPrice * (1 + (volatility * volatilityFactor * 3));
    signal.takeProfit = currentPrice * (1 - (volatility * volatilityFactor * 6));
    if (isHighVolatility) {
      signal.leverage = Math.min(3, globalState.maxLeverage * 0.5);
      signal.reasoning.push("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ‚Üí —Å–Ω–∏–∂–∞–µ–º –ø–ª–µ—á–æ");
    } else if (isLowVolatility) {
      signal.leverage = Math.min(10, globalState.maxLeverage * 1.5);
      signal.reasoning.push("üìâ –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ‚Üí —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–ª–µ—á–æ");
    } else {
      signal.leverage = globalState.maxLeverage;
    }
  }
  if (signal.riskScore > 70) {
    signal.confidence *= 0.8;
    signal.reasoning.push("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫-—Å–∫–æ—Ä ‚Üí —Å–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å");
  } else if (signal.riskScore < 30) {
    signal.confidence *= 1.2;
    signal.reasoning.push("‚úÖ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫-—Å–∫–æ—Ä ‚Üí —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å");
  }
  signal.reasoning.push(`üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${volatility.toFixed(4)} (${isHighVolatility ? '–í—ã—Å–æ–∫–∞—è' : isLowVolatility ? '–ù–∏–∑–∫–∞—è' : '–°—Ä–µ–¥–Ω—è—è'})`);
  signal.reasoning.push(`üìà –†—ã–Ω–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥: ${isUptrend ? '–í–æ—Å—Ö–æ–¥—è—â–∏–π' : isDowntrend ? '–ù–∏—Å—Ö–æ–¥—è—â–∏–π' : '–ë–æ–∫–æ–≤–æ–π'}`);
  signal.reasoning.push(`üß† –†—ã–Ω–æ—á–Ω—ã–π sentiment: ${marketSentiment.toFixed(0)}%`);
  signal.reasoning.push(`üîç –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: ${fundamentalScore.toFixed(0)}/100`);
  signal.reasoning.push(`‚ö†Ô∏è –†–∏—Å–∫-—Å–∫–æ—Ä: ${signal.riskScore.toFixed(0)}/100`);
  return {
    coin: coinName,
    currentPrice,
    signal,
    rsi,
    volatility,
    sma20,
    sma50,
    sma200,
    atr,
    bollingerUpper,
    bollingerLower,
    macd,
    ichimoku,
    marketSentiment,
    fundamentalScore
  };
}

// ==========================
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// ==========================
function calculateSMA(prices, period) {
  if (prices.length < period) return 0;
  return prices.slice(-period).reduce((a, b) => a + b, 0) / period;
}
function calculateATR(candles) {
  let trSum = 0;
  for (let i = 1; i < candles.length; i++) {
    const tr = Math.max(
      candles[i].high - candles[i].low,
      Math.abs(candles[i].high - candles[i-1].close),
      Math.abs(candles[i].low - candles[i-1].close)
    );
    trSum += tr;
  }
  return trSum / candles.length;
}
function calculateRSI(prices) {
  if (prices.length < 2) return 50;
  let gains = 0, losses = 0, count = 0;
  for (let i = 1; i < prices.length; i++) {
    const diff = prices[i] - prices[i-1];
    if (diff > 0) gains += diff;
    else losses += Math.abs(diff);
    count++;
  }
  const avgGain = gains / count;
  const avgLoss = losses / count;
  const rs = avgLoss === 0 ? 100 : avgGain / avgLoss;
  return 100 - (100 / (1 + rs));
}
function calculateBollingerBands(prices, period, stdDev) {
  const sma = calculateSMA(prices, period);
  const std = Math.sqrt(prices.slice(-period).reduce((sum, price) => sum + Math.pow(price - sma, 2), 0) / period);
  return {
    sma,
    upper: sma + (std * stdDev),
    lower: sma - (std * stdDev)
  };
}
function calculateMACD(prices, fastPeriod = 12, slowPeriod = 26, signalPeriod = 9) {
  const fastEMA = calculateEMA(prices, fastPeriod);
  const slowEMA = calculateEMA(prices, slowPeriod);
  const macd = fastEMA - slowEMA;
  const signal = calculateEMA([macd], signalPeriod)[0];
  return { macd, signal };
}
function calculateEMA(prices, period) {
  const multiplier = 2 / (period + 1);
  let ema = prices[0];
  for (let i = 1; i < prices.length; i++) {
    ema = (prices[i] - ema) * multiplier + ema;
  }
  return ema;
}
function calculateIchimokuCloud(candles) {
  const tenkanSen = (Math.max(...candles.slice(-9).map(c => c.high)) + Math.min(...candles.slice(-9).map(c => c.low))) / 2;
  const kijunSen = (Math.max(...candles.slice(-26).map(c => c.high)) + Math.min(...candles.slice(-26).map(c => c.low))) / 2;
  const senkouSpanA = (tenkanSen + kijunSen) / 2;
  const senkouSpanB = (Math.max(...candles.slice(-52).map(c => c.high)) + Math.min(...candles.slice(-52).map(c => c.low))) / 2;
  return {
    tenkanSen,
    kijunSen,
    senkouSpanA,
    senkouSpanB
  };
}
function calculateFundamentalScore(fundamentalData) {
  let score = 50;
  if (fundamentalData.developerActivity) {
    if (fundamentalData.developerActivity > 100) score += 20;
    else if (fundamentalData.developerActivity > 50) score += 10;
    else if (fundamentalData.developerActivity < 20) score -= 15;
    else if (fundamentalData.developerActivity < 10) score -= 25;
  }
  if (fundamentalData.socialSentiment) {
    if (fundamentalData.socialSentiment > 70) score += 15;
    else if (fundamentalData.socialSentiment > 50) score += 5;
    else if (fundamentalData.socialSentiment < 30) score -= 15;
    else if (fundamentalData.socialSentiment < 10) score -= 25;
  }
  return Math.max(0, Math.min(100, score));
}
function calculateMarketSentiment(fearIndex, fundamentalScore) {
  return (fearIndex + fundamentalScore) / 2;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
// ==========================
async function checkOpenPositions(currentPrices) {
  for (const coin of globalState.watchlist) {
    const position = globalState.positions[coin.name];
    if (!position) continue;
    const currentPrice = currentPrices[coin.name];
    if (!currentPrice) continue;
    let shouldClose = false;
    let reason = '';
    if (position.type === 'LONG' && currentPrice >= position.takeProfit) {
      shouldClose = true;
      reason = 'üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å';
    } else if (position.type === 'SHORT' && currentPrice <= position.takeProfit) {
      shouldClose = true;
      reason = 'üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å';
    }
    if (position.type === 'LONG' && currentPrice <= position.stopLoss) {
      shouldClose = true;
      reason = 'üõë –°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å';
    } else if (position.type === 'SHORT' && currentPrice >= position.stopLoss) {
      shouldClose = true;
      reason = 'üõë –°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å';
    }
    if (position.type === 'LONG' && currentPrice > position.entryPrice * 1.01) {
      position.trailingStop = Math.max(position.trailingStop || position.entryPrice, currentPrice * 0.99);
      if (currentPrice <= position.trailingStop) {
        shouldClose = true;
        reason = 'üìâ –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø —Å—Ä–∞–±–æ—Ç–∞–ª';
      }
    } else if (position.type === 'SHORT' && currentPrice < position.entryPrice * 0.99) {
      position.trailingStop = Math.min(position.trailingStop || position.entryPrice, currentPrice * 1.01);
      if (currentPrice >= position.trailingStop) {
        shouldClose = true;
        reason = 'üìâ –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø —Å—Ä–∞–±–æ—Ç–∞–ª';
      }
    }
    if (position.riskScore > 80) {
      shouldClose = true;
      reason = '‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫-—Å–∫–æ—Ä ‚Üí –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é';
    }
    if (shouldClose) {
      console.log(`‚úÖ –ó–ê–ö–†–´–¢–ò–ï: ${reason} –ø–æ ${coin.name}`);
      const tradeIndex = globalState.history.findIndex(t => t.coin === coin.name && t.status === 'OPEN');
      if (tradeIndex !== -1) {
        const trade = globalState.history[tradeIndex];
        trade.exitPrice = currentPrice;
        trade.profitPercent = position.type === 'LONG' 
          ? (currentPrice - trade.entryPrice) / trade.entryPrice 
          : (trade.entryPrice - currentPrice) / trade.entryPrice;
        trade.status = 'CLOSED';
        if (trade.profitPercent > 0) {
          globalState.stats.profitableTrades++;
          if (globalState.isRealMode) {}
          else {
            globalState.balance += (trade.size * trade.entryPrice * trade.profitPercent);
          }
        } else {
          globalState.stats.losingTrades++;
          if (globalState.isRealMode) {}
          else {
            globalState.balance += (trade.size * trade.entryPrice * trade.profitPercent);
          }
        }
      }
      globalState.positions[coin.name] = null;
      globalState.marketMemory.consecutiveTrades[coin.name] = 0;
    } else {
      if (position.type === 'LONG' && currentPrice > position.entryPrice * 1.01) {
        position.trailingStop = Math.max(position.trailingStop || position.entryPrice, currentPrice * 0.99);
      } else if (position.type === 'SHORT' && currentPrice < position.entryPrice * 0.99) {
        position.trailingStop = Math.min(position.trailingStop || position.entryPrice, currentPrice * 1.01);
      }
    }
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
// ==========================
function setRiskLevel(level) {
  globalState.riskLevel = level;
  if (globalState.tradeMode === 'scalping') {
    globalState.scalpingSettings = {
      takeProfitPercent: 0.01,
      stopLossPercent: 0.005
    };
  } else if (globalState.tradeMode === 'swing') {
    globalState.scalpingSettings = {
      takeProfitPercent: 0.05,
      stopLossPercent: 0.03
    };
  } else {
    globalState.scalpingSettings = {
      takeProfitPercent: 0.03,
      stopLossPercent: 0.02
    };
  }
  switch(level) {
    case 'recommended':
      globalState.maxRiskPerTrade = 0.01;
      globalState.maxLeverage = 3;
      console.log('üìâ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: 1%, –ø–ª–µ—á–æ 3x');
      break;
    case 'medium':
      globalState.maxRiskPerTrade = 0.02;
      globalState.maxLeverage = 5;
      console.log('‚öñÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –°–†–ï–î–ù–ò–ô —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: 2%, –ø–ª–µ—á–æ 5x');
      break;
    case 'high':
      globalState.maxRiskPerTrade = 0.05;
      globalState.maxLeverage = 10;
      console.log('üöÄ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –í–´–°–û–ö–ò–ô —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: 5%, –ø–ª–µ—á–æ 10x');
      break;
    case 'extreme':
      globalState.maxRiskPerTrade = 0.10;
      globalState.maxLeverage = 20;
      console.log('üí• –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: 10%, –ø–ª–µ—á–æ 20x (–û–ß–ï–ù–¨ –í–´–°–û–ö–ò–ô –†–ò–°–ö!)');
      break;
  }
  return globalState.riskLevel;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç—ã
// ==========================
async function getFundamentalData(coin) {
  const now = Date.now();
  const cacheKey = coin.name;
  const cacheDuration = 300000; // 5 –º–∏–Ω—É—Ç
  if (globalState.fundamentalCache[cacheKey] && 
      now - globalState.fundamentalCache[cacheKey].timestamp < cacheDuration) {
    console.log(`üíæ –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${coin.name}`);
    return globalState.fundamentalCache[cacheKey].data;
  }
  try {
    const response = await axios.get(`https://api.coingecko.com/api/v3/coins/${coin.name}`, {
      params: {
        localization: false,
        tickers: false,
        market_data: true,
        community_data: true,
        developer_data: true,
        last_updated: true
      },
      timeout: 10000
    });
    const data = response.data;
    const fundamentalData = {
      hashRate: null,
      activeAddresses: null,
      transactions: null,
      developerActivity: null,
      socialSentiment: null
    };
    if (data.market_data) {
      fundamentalData.socialSentiment = data.market_data.sentiment_votes_up_percentage || 50;
    }
    if (data.developer_data) {
      fundamentalData.developerActivity = data.developer_data.commits_30d || 0;
    }
    // ‚ùå –£–ë–†–ê–ù–û: –ù–ï –ü–ï–†–ï–ó–ê–ü–ò–°–´–í–ê–ï–ú —á–µ—Ä–µ–∑ twitter_followers!
    globalState.fundamentalCache[cacheKey] = {
      fundamentalData,
      timestamp: now
    };
    globalState.marketMemory.fundamentalData[coin.name] = fundamentalData;
    // –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è 429
    await new Promise(r => setTimeout(r, 10000));
    return fundamentalData;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${coin.name}:`, error.message);
    if (globalState.fundamentalCache[cacheKey]) {
      console.log(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${coin.name} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API`);
      return globalState.fundamentalCache[cacheKey].data;
    }
    return null;
  }
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
// ==========================
async function forceUpdateRealBalance() {
  console.log('üîÑ [–ë–ê–õ–ê–ù–°] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
  const balance = await getBingXRealBalance();
  if (balance !== null) {
    globalState.realBalance = balance;
    console.log(`‚úÖ [–ë–ê–õ–ê–ù–°] –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω: $${balance.toFixed(2)}`);
  }
  return balance;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è –¥–µ–º–æ)
// ==========================
function deposit(amount) {
  if (amount <= 0) return false;
  globalState.balance += amount;
  console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ $${amount}. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: $${globalState.balance.toFixed(2)}`);
  return true;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ (–î–ï–ú–û ‚Üî –†–ï–ê–õ–¨–ù–´–ô)
// ==========================
function toggleMode() {
  globalState.isRealMode = !globalState.isRealMode;
  console.log(`üîÑ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞: ${globalState.isRealMode ? '–†–ï–ê–õ–¨–ù–´–ô' : '–î–ï–ú–û'}`);
  if (globalState.isRealMode) {
    forceUpdateRealBalance();
  }
  return globalState.isRealMode;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (adaptive, scalping, swing)
// ==========================
function toggleTradeMode() {
  const modes = ['adaptive', 'scalping', 'swing'];
  const currentIndex = modes.indexOf(globalState.tradeMode);
  const nextIndex = (currentIndex + 1) % modes.length;
  globalState.tradeMode = modes[nextIndex];
  setRiskLevel(globalState.riskLevel);
  console.log(`‚ö° –¢–æ—Ä–≥–æ–≤—ã–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞: ${globalState.tradeMode}`);
  return globalState.tradeMode;
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
// ==========================
function printStats() {
  const s = globalState.stats;
  console.log(`
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–õ–ò:`);
  console.log(`   –°–¥–µ–ª–æ–∫ –≤—Å–µ–≥–æ: ${s.totalTrades} (–ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${s.profitableTrades}, —É–±—ã—Ç–æ—á–Ω—ã—Ö: ${s.losingTrades})`);
  console.log(`   Win Rate: ${s.winRate.toFixed(1)}%`);
  console.log(`   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: $${s.totalProfit.toFixed(2)} (${((s.totalProfit / 100) * 100).toFixed(1)}%)`);
  console.log(`   –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: ${s.maxDrawdown.toFixed(1)}%`);
  console.log(`   –ú–∞–∫—Å. –ø–ª–µ—á–æ: ${s.maxLeverageUsed}x`);
  console.log(`   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞: ${s.volatilityIndex.toFixed(2)}%`);
  console.log(`   –†—ã–Ω–æ—á–Ω—ã–π sentiment: ${s.marketSentiment.toFixed(0)}%`);
  console.log(`   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: $${globalState.balance.toFixed(2)}`);
}

// ==========================
// –§–£–ù–ö–¶–ò–Ø: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API BingX
// ==========================
async function testBingXAPI() {
  try {
    console.log('üß™ [–¢–ï–°–¢] –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API BingX...');
    if (!BINGX_API_KEY || !BINGX_SECRET_KEY) {
      console.error('‚ùå [–¢–ï–°–¢] API-–∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return { success: false, message: 'API-–∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã' };
    }
    const balance = await getBingXRealBalance();
    if (balance === null) {
      console.error('‚ùå [–¢–ï–°–¢] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å');
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å' };
    }
    const btcPrice = await getCurrentPrices();
    const btcPriceValue = btcPrice.bitcoin || 62450.50;
    const riskPercent = 0.3;
    const stopLossPercent = 0.02;
    const riskAmount = balance * riskPercent;
    const stopDistance = btcPriceValue * stopLossPercent;
    const size = riskAmount / stopDistance;
    console.log(`üß™ [–¢–ï–°–¢] –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é LONG —Å —Ä–∏—Å–∫–æ–º 30% –æ—Ç –±–∞–ª–∞–Ω—Å–∞: $${riskAmount.toFixed(2)}`);
    const result = await placeBingXFuturesOrder(
      'BTC-USD',
      'BUY',
      'MARKET',
      size,
      null,
      3,
      'LONG'
    );
    if (result) {
      const fee = size * btcPriceValue * globalState.takerFee;
      const trade = {
        coin: 'bitcoin',
        type: 'LONG',
        size: size,
        entryPrice: btcPriceValue,
        currentPrice: btcPriceValue,
        leverage: 3,
        stopLoss: btcPriceValue * (1 - stopLossPercent),
        takeProfit: btcPriceValue * 1.04,
        fee: fee,
        timestamp: new Date().toLocaleString(),
        status: 'OPEN',
        orderId: result.orderId,
        progress: 0,
        probability: 50
      };
      globalState.history.push(trade);
      globalState.positions['bitcoin'] = trade;
      globalState.stats.totalTrades++;
      globalState.marketMemory.consecutiveTrades['bitcoin'] = (globalState.marketMemory.consecutiveTrades['bitcoin'] || 0) + 1;
      globalState.stats.maxLeverageUsed = Math.max(globalState.stats.maxLeverageUsed, 3);
      console.log('‚úÖ [–¢–ï–°–¢] –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞!');
      return { success: true, message: '–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π —Å—á–µ—Ç –Ω–∞ BingX.' };
    } else {
      console.error('‚ùå [–¢–ï–°–¢] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ BingX Futures');
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ BingX Futures' };
    }
  } catch (error) {
    console.error('‚ùå [–¢–ï–°–¢] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API BingX:', error.message);
    return { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: ' + error.message };
  }
}

// ==========================
// HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
// ==========================
const app = express();
const PORT = process.env.PORT || 10000;

// Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function authenticate(req, res, next) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞
  if (req.path === '/login' || req.path === '/favicon.ico' || req.path === '/login.css') {
    return next();
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ cookies
  if (req.cookies.authToken) {
    return next();
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
  res.redirect('/login');
}

app.use(cors());
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(authenticate);

app.get('/login', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</title>
      <style>
        body {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          margin: 0;
          padding: 20px;
          background-color: #f5f5f5;
          display: flex;
          justify-content: center;
          align-items: center;
          min-height: 100vh;
        }
        .login-form {
          max-width: 400px;
          margin: 0 auto;
          padding: 20px;
          background: white;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .login-form h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .login-form input {
          width: 100%;
          padding: 10px;
          margin-bottom: 15px;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        .login-form button {
          width: 100%;
          padding: 10px;
          background: #3498db;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .login-form button:hover {
          background: #2980b9;
        }
      </style>
    </head>
    <body>
      <div class="login-form">
        <h2>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
        <form id="loginForm">
          <input type="password" name="password" placeholder="–ü–∞—Ä–æ–ª—å" required>
          <button type="submit">–í–æ–π—Ç–∏</button>
        </form>
      </div>
      <script>
        document.getElementById('loginForm').addEventListener('submit', function(e) {
          e.preventDefault();
          const password = document.querySelector('input[name="password"]').value;
          fetch('/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ password })
          }).then(response => response.json())
            .then(data => {
              if (data.success) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ cookies
                document.cookie = "authToken=true; path=/; max-age=3600";
                window.location.href = '/';
              } else {
                alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
              }
            });
        });
      </script>
    </body>
    </html>
  `);
});

app.post('/login', (req, res) => {
  const { password } = req.body;
  if (password === APP_PASSWORD) {
    res.cookie('authToken', 'true', { path: '/', maxAge: 3600000 }); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cookie –Ω–∞ 1 —á–∞—Å
    res.json({ success: true });
  } else {
    res.status(401).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
  }
});

app.get('/logout', (req, res) => {
  res.clearCookie('authToken', { path: '/' });
  res.redirect('/login');
});

app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>–¢–æ—Ä–≥–æ–≤—ã–π –ë–æ—Ç</title>
      <style>
        body {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          margin: 0;
          padding: 20px;
          background-color: #f5f5f5;
          color: #333;
        }
        .container {
          max-width: 1000px;
          margin: 0 auto;
        }
        @media (max-width: 768px) {
          .container {
            padding: 10px;
          }
          h1 {
            font-size: 1.5rem;
          }
          table {
            font-size: 0.9rem;
          }
        }
        h1 {
          color: #2c3e50;
          margin-bottom: 10px;
        }
        h2 {
          color: #3498db;
          margin-top: 20px;
          margin-bottom: 10px;
        }
        p {
          margin: 10px 0;
        }
        .stats {
          display: flex;
          flex-wrap: wrap;
          gap: 20px;
          margin-bottom: 20px;
        }
        .stat-card {
          background: white;
          padding: 15px;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          flex: 1;
          min-width: 200px;
        }
        .stat-value {
          font-size: 1.5rem;
          font-weight: bold;
          color: #2c3e50;
        }
        .stat-label {
          color: #7f8c8d;
          font-size: 0.9rem;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          padding: 10px;
          text-align: left;
          border-bottom: 1px solid #ddd;
        }
        th {
          background-color: #f2f2f2;
        }
        .trading-view {
          background: white;
          padding: 15px;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          margin-top: 20px;
        }
        .trading-view canvas {
          width: 100%;
          height: 300px;
        }
        .settings {
          background: white;
          padding: 15px;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          margin-top: 20px;
        }
        .settings h2 {
          margin-top: 0;
        }
        .settings form {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 15px;
        }
        @media (max-width: 768px) {
          .settings form {
            grid-template-columns: 1fr;
          }
        }
        .settings input, .settings select {
          padding: 8px;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        .settings button {
          padding: 8px 15px;
          background: #3498db;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .settings button:hover {
          background: #2980b9;
        }
        .logout-button {
          background: #e74c3c;
          margin-top: 15px;
        }
        .logout-button:hover {
          background: #c0392b;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>–¢–æ—Ä–≥–æ–≤—ã–π –ë–æ—Ç</h1>
        <div class="stats">
          <div class="stat-card">
            <div class="stat-value">$${globalState.balance.toFixed(2)}</div>
            <div class="stat-label">–ë–∞–ª–∞–Ω—Å</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${globalState.stats.totalTrades}</div>
            <div class="stat-label">–°–¥–µ–ª–æ–∫ –≤—Å–µ–≥–æ</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${globalState.stats.profitableTrades}</div>
            <div class="stat-label">–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${globalState.stats.losingTrades}</div>
            <div class="stat-label">–£–±—ã—Ç–æ—á–Ω—ã—Ö</div>
          </div>
        </div>
        <h2>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${globalState.isRealMode ? '–†–ï–ê–õ–¨–ù–´–ô' : '–î–ï–ú–û'}</h2>
        <div class="settings">
          <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          <form id="settingsForm">
            <div>
              <label for="riskLevel">–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</label>
              <select id="riskLevel" name="riskLevel">
                <option value="recommended" ${globalState.riskLevel === 'recommended' ? 'selected' : ''}>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π</option>
                <option value="medium" ${globalState.riskLevel === 'medium' ? 'selected' : ''}>–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="high" ${globalState.riskLevel === 'high' ? 'selected' : ''}>–í—ã—Å–æ–∫–∏–π</option>
                <option value="extreme" ${globalState.riskLevel === 'extreme' ? 'selected' : ''}>–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π</option>
              </select>
            </div>
            <div>
              <label for="tradeMode">–¢–æ—Ä–≥–æ–≤—ã–π —Ä–µ–∂–∏–º:</label>
              <select id="tradeMode" name="tradeMode">
                <option value="adaptive" ${globalState.tradeMode === 'adaptive' ? 'selected' : ''}>–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π</option>
                <option value="scalping" ${globalState.tradeMode === 'scalping' ? 'selected' : ''}>–°–∫–∞–ª—å–ø–∏–Ω–≥</option>
                <option value="swing" ${globalState.tradeMode === 'swing' ? 'selected' : ''}>–°–≤–∏–Ω–≥</option>
              </select>
            </div>
            <div>
              <label for="realMode">–†–µ–∂–∏–º:</label>
              <select id="realMode" name="realMode">
                <option value="demo" ${!globalState.isRealMode ? 'selected' : ''}>–î–µ–º–æ</option>
                <option value="real" ${globalState.isRealMode ? 'selected' : ''}>–†–µ–∞–ª—å–Ω—ã–π</option>
              </select>
            </div>
            <button type="submit" class="logout-button" onclick="document.cookie='authToken=; path=/; max-age=0'; window.location.href='/logout'">–í—ã–π—Ç–∏</button>
            <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</button>
          </form>
        </div>
        <h2>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏</h2>
        <table>
          <thead>
            <tr>
              <th>–í—Ä–µ–º—è</th>
              <th>–ú–æ–Ω–µ—Ç–∞</th>
              <th>–¢–∏–ø</th>
              <th>–¶–µ–Ω–∞</th>
              <th>–ü—Ä–∏–±—ã–ª—å</th>
            </tr>
          </thead>
          <tbody>
            ${globalState.history.slice(-5).map(h => `
              <tr>
                <td>${h.timestamp}</td>
                <td>${h.coin}</td>
                <td>${h.type}</td>
                <td>$${h.entryPrice.toFixed(2)}</td>
                <td style="color: ${h.profitPercent > 0 ? 'green' : 'red'}">${h.profitPercent > 0 ? '+' : ''}${(h.profitPercent * 100).toFixed(2)}%</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
      <script>
        document.getElementById('settingsForm').addEventListener('submit', function(e) {
          e.preventDefault();
          const formData = new FormData(this);
          fetch('/update-settings', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(Object.fromEntries(formData))
          }).then(response => response.json())
            .then(data => {
              if (data.success) {
                alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
                location.reload();
              }
            });
        });
      </script>
    </body>
    </html>
  `);
});

app.post('/update-settings', (req, res) => {
  const { riskLevel, tradeMode, realMode } = req.body;
  
  if (riskLevel) {
    setRiskLevel(riskLevel);
  }
  
  if (tradeMode) {
    globalState.tradeMode = tradeMode;
  }
  
  if (realMode) {
    globalState.isRealMode = (realMode === 'real');
    if (globalState.isRealMode) {
      forceUpdateRealBalance();
    }
  }
  
  res.json({ success: true, message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' });
});

// ==========================
// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ‚Äî –¶–ò–ö–õ –ë–û–¢–ê
// ==========================
(async () => {
  console.log('ü§ñ –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê (BINGX API)');
  setRiskLevel('recommended');
  globalState.tradeMode = 'adaptive';
  await forceUpdateRealBalance();

  while (globalState.isRunning) {
    try {
      console.log(`\n[${new Date().toLocaleTimeString()}] === –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê ===`);
      const fearIndex = await getFearAndGreedIndex();
      console.log(`üò± –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞: ${fearIndex}`);

      if (Date.now() % 300000 < 10000) {
        await forceUpdateRealBalance();
      }

      const currentPrices = await getCurrentPrices();
      globalState.currentPrices = currentPrices;

      // –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 10000 –º—Å
      for (const coin of globalState.watchlist) {
        await getFundamentalData(coin);
      }

      await checkOpenPositions(currentPrices);

      let bestOpportunity = null;
      let bestReasoning = [];

      for (const coin of globalState.watchlist) {
        console.log(`\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é ${coin.name}...`);
        const candles = await getBingXFuturesHistory(coin.symbol, '1h', 100);

        if (candles.length < 50) {
          console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${coin.name} ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö`);
          await new Promise(r => setTimeout(r, 2000));
          continue;
        }

        const analysis = analyzeMarketWithAdaptiveStrategy(candles, coin.name, fearIndex, globalState.marketMemory.fundamentalData[coin.name]);

        if (!analysis || !analysis.signal.direction) {
          await new Promise(r => setTimeout(r, 2000));
          continue;
        }

        console.log(`   ‚úÖ –°–∏–≥–Ω–∞–ª: ${analysis.signal.direction}`);
        analysis.signal.reasoning.forEach(r => console.log(`   ‚Ä¢ ${r}`));

        if (!bestOpportunity || analysis.signal.confidence > bestOpportunity.signal.confidence) {
          bestOpportunity = analysis;
          bestReasoning = analysis.signal.reasoning;
        }

        await new Promise(r => setTimeout(r, 2000));
      }

      if (bestOpportunity && (globalState.isRealMode || globalState.balance > 10)) {
        console.log(`\nüíé –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø: ${bestOpportunity.signal.direction} –ø–æ ${bestOpportunity.coin}`);
        bestReasoning.forEach(r => console.log(`   ‚Ä¢ ${r}`));

        const currentBalance = globalState.isRealMode ? (globalState.realBalance || 100) : globalState.balance;
        const riskAmount = currentBalance * globalState.maxRiskPerTrade;
        const price = bestOpportunity.currentPrice;
        const stopDistance = bestOpportunity.signal.direction === 'LONG' 
          ? price - bestOpportunity.signal.stopLoss 
          : bestOpportunity.signal.stopLoss - price;
        const size = riskAmount / stopDistance;
        const finalSize = Math.max(0.001, size);

        console.log(`\nüü¢ –í–•–û–î: ${bestOpportunity.signal.direction} ${finalSize.toFixed(6)} ${bestOpportunity.coin} —Å –ø–ª–µ—á–æ–º ${bestOpportunity.signal.leverage}x`);
        await openFuturesTrade(
          bestOpportunity.coin,
          bestOpportunity.signal.direction,
          bestOpportunity.signal.leverage,
          finalSize,
          bestOpportunity.currentPrice,
          bestOpportunity.signal.stopLoss,
          bestOpportunity.signal.takeProfit
        );
      } else {
        console.log(`\n‚ö™ –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ‚Äî –æ–∂–∏–¥–∞–µ–º...`);
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      if (!globalState.isRealMode) {
        globalState.stats.totalProfit = globalState.balance - 100;
        if (globalState.balance > globalState.stats.peakBalance) {
          globalState.stats.peakBalance = globalState.balance;
        }
        globalState.stats.maxDrawdown = ((globalState.stats.peakBalance - globalState.balance) / globalState.stats.peakBalance) * 100;
      }

      globalState.stats.winRate = globalState.stats.totalTrades > 0
        ? (globalState.stats.profitableTrades / globalState.stats.totalTrades) * 100
        : 0;

      if (Date.now() % 60000 < 10000) {
        console.log(`\nüí∞ –ë–∞–ª–∞–Ω—Å: $${(globalState.isRealMode ? globalState.realBalance : globalState.balance)?.toFixed(2) || '...'}`);
        console.log(`üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${globalState.stats.volatilityIndex.toFixed(2)}%`);
        console.log(`üß† Sentiment: ${globalState.stats.marketSentiment.toFixed(0)}%`);
      }

    } catch (error) {
      console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¶–ò–ö–õ–ï:', error.message);
    }

    console.log(`\nüí§ –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥...`);
    await new Promise(r => setTimeout(r, 60000));
  }
})();

// ==========================
// –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
// ==========================
app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err.stack);
  res.status(500).send('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
});

// ==========================
// –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
// ==========================
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É: https://cryptophilosopherbot-0o69.onrender.com`);
  console.log(`üîê –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞: ${APP_PASSWORD}`);
});
