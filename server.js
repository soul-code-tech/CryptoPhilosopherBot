const express = require('express');
const cors = require('cors');
const path = require('path');
const axios = require('axios'); // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û ‚Äî –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏!

const bot = require('./index.js');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, '.')));

// API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ + —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
app.get('/api/state', async (req, res) => {
  try {
    const realBalance = await getBingXRealBalance();
    res.json({
      balance: bot.globalState.balance,
      realBalance: realBalance,
      positions: bot.globalState.positions,
      stats: bot.globalState.stats,
      history: bot.globalState.history.slice(-50),
      platform: 'BingX Futures'
    });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è' });
  }
});

// API: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–º–æ-–±–∞–ª–∞–Ω—Å–∞
app.post('/api/deposit', (req, res) => {
  const { amount } = req.body;
  if (amount > 0) {
    const success = bot.deposit(amount);
    if (success) {
      res.json({ success: true, balance: bot.globalState.balance });
    } else {
      res.status(400).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }
  } else {
    res.status(400).json({ success: false, message: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π' });
  }
});

// API: –û—Ç–ø—Ä–∞–≤–∫–∞ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
app.post('/api/notify', (req, res) => {
  const { title, body, url } = req.body;
  console.log(`üîî [PUSH] ${title}: ${body}`);
  res.json({ success: true });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ ‚Äî –ò–°–ü–†–ê–í–õ–ï–ù–ê!
async function getBingXRealBalance() {
  const BINGX_API_KEY = process.env.BINGX_API_KEY;
  const BINGX_SECRET_KEY = process.env.BINGX_SECRET_KEY;
  const BINGX_FUTURES_URL = 'https://open-api.bingx.com';
  
  const CryptoJS = require('crypto-js');

  function signBingXRequest(params) {
    const sortedParams = Object.keys(params)
      .sort()
      .map(key => `${key}=${params[key]}`)
      .join('&');
    return CryptoJS.HmacSHA256(sortedParams, BINGX_SECRET_KEY).toString(CryptoJS.enc.Hex);
  }

  try {
    const timestamp = Date.now();
    const params = { timestamp };
    const signature = signBingXRequest(params);
    const url = `${BINGX_FUTURES_URL}/openApi/swap/v2/user/balance?${new URLSearchParams(params)}&signature=${signature}`;

    const response = await axios.get(url, {
      headers: { 'X-BX-APIKEY': BINGX_API_KEY },
      timeout: 10000
    });

    if (response.data.code === 0 && response.data.data) {
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: BingX –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ –º–∞—Å—Å–∏–≤
      const assets = response.data.data.assets || response.data.data;
      const assetsArray = Array.isArray(assets) ? assets : Object.values(assets);
      
      const usdtAsset = assetsArray.find(asset => asset.asset === 'USDT');
      if (usdtAsset && usdtAsset.walletBalance) {
        return parseFloat(usdtAsset.walletBalance);
      }
    }
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å BingX:', error.message);
    return null;
  }
}

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('–¢–≤–æ–π —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});
