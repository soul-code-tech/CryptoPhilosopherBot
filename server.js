const express = require('express');
const cors = require('cors');
const path = require('path');
const axios = require('axios');

const bot = require('./index.js');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, '.')));

// API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
app.get('/api/state', async (req, res) => {
  try {
    res.json({
      balance: bot.globalState.balance,
      realBalance: bot.globalState.realBalance,
      positions: bot.globalState.positions,
      stats: bot.globalState.stats,
      history: bot.globalState.history.slice(-50),
      platform: 'BingX Futures',
      isRealMode: bot.globalState.isRealMode,
      tradeMode: bot.globalState.tradeMode,
      riskLevel: bot.globalState.riskLevel,
      currentPrices: bot.globalState.currentPrices,
      fearIndex: bot.globalState.fearIndex,
      news: bot.globalState.marketMemory.news || []
    });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è' });
  }
});

// API: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–º–æ-–±–∞–ª–∞–Ω—Å–∞
app.post('/api/deposit', (req, res) => {
  const { amount } = req.body;
  if (amount > 0) {
    const success = bot.deposit(amount);
    if (success) {
      res.json({ success: true, balance: bot.globalState.balance });
    } else {
      res.status(400).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }
  } else {
    res.status(400).json({ success: false, message: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π' });
  }
});

// API: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ (–î–ï–ú–û ‚Üî –†–ï–ê–õ–¨–ù–´–ô)
app.post('/api/toggleMode', (req, res) => {
  try {
    const newMode = bot.toggleMode();
    res.json({ 
      success: true, 
      isRealMode: newMode,
      message: `–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞: ${newMode ? '–†–ï–ê–õ–¨–ù–´–ô' : '–î–ï–ú–û'}`
    });
  } catch (error) {
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞' });
  }
});

// API: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (stable ‚Üî scalping)
app.post('/api/toggleTradeMode', (req, res) => {
  try {
    const newMode = bot.toggleTradeMode();
    res.json({ 
      success: true, 
      tradeMode: newMode,
      message: `–¢–æ—Ä–≥–æ–≤—ã–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞: ${newMode}`
    });
  } catch (error) {
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞' });
  }
});

// API: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
app.post('/api/setRiskLevel', (req, res) => {
  try {
    const { level } = req.body;
    if (!level || !['recommended', 'medium', 'high', 'extreme'].includes(level)) {
      return res.status(400).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞' });
    }
    
    const newLevel = bot.setRiskLevel(level);
    res.json({ 
      success: true, 
      riskLevel: newLevel,
      message: `–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${newLevel}`
    });
  } catch (error) {
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞' });
  }
});

// API: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
app.post('/api/forceUpdateBalance', (req, res) => {
  try {
    bot.forceUpdateRealBalance();
    res.json({ 
      success: true, 
      message: '–ó–∞–ø—Ä–æ—à–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞'
    });
  } catch (error) {
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞' });
  }
});

// API: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
app.get('/api/news', async (req, res) => {
  try {
    const news = bot.globalState.marketMemory.news || [];
    res.json({ news });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π' });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('–¢–≤–æ–π —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —Ä–µ–∂–∏–º–æ–≤!');
});
